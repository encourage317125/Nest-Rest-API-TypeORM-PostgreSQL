/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/account/office_hours": {
    /** Get account office hours list */
    get: operations["GetAccountOfficeHoursList"];
    /** Create new Account office hours entry */
    post: operations["CreateAccountOfficeHours"];
  };
  "/account/office_hours/{uuid}": {
    /** Get Account office hours extended info */
    get: operations["GetAccountOfficeHours"];
    /** Delete Account Office hours */
    delete: operations["RemoveAccountOfficeHoursByUUID"];
    /** Update Account Office hours */
    patch: operations["UpdateAccountOfficeHours"];
  };
  "/account": {
    /** Get current user account */
    get: operations["GetAccount"];
  };
  "/account/user": {
    /** Get account users */
    get: operations["GetUsersByAccount"];
    /** Add user to account */
    post: operations["AddUserToAccount"];
  };
  "/account/{uuid}": {
    /** Get user account */
    get: operations["GetAccountByUUID"];
  };
  "/account/user/{uuid}": {
    /** Reactivate user account */
    put: operations["ReactivateUserAccountByUUID"];
    /** Deactivate user account */
    delete: operations["DeactivateUserAccountByUUID"];
  };
  "/address": {
    /** Create new Address */
    post: operations["CreateAddress"];
  };
  "/address/account": {
    /** Get Address list related to account */
    get: operations["GetAddressListByAccount"];
  };
  "/address/user": {
    /** Get Address list related to user */
    get: operations["GetAddressListByUser"];
  };
  "/address/{uuid}": {
    /** Get Address extended info */
    get: operations["GetAddress"];
    /** Delete Address */
    delete: operations["RemoveAddressByUUID"];
    /** Update Address */
    patch: operations["UpdateAddress"];
  };
  "/admin/schedule/{action}": {
    /** Run Scheduler action */
    get: operations["ScheduleAction"];
  };
  "/admin/class4/products/sync": {
    /** Run Class4 products sync job */
    get: operations["Class4SyncProducts"];
  };
  "/admin/class4/did/prefix": {
    /** Run class4: create did prefixes */
    post: operations["Class4DIDPrefixCreate"];
  };
  "/admin/tnlease/create": {
    /** Manual tnlease creation */
    post: operations["TnleaseCreate"];
  };
  "/admin/system/dict_gtts_reload": {
    /** Run Invoice send job */
    get: operations["SystemDICTGTTSReload"];
  };
  "/auth": {
    /** Auth user */
    get: operations["Auth"];
  };
  "/dict/tz": {
    /** list all timezones */
    get: operations["ListDictTimeZone"];
  };
  "/dict/gtts": {
    /** list all available TTS Voices */
    get: operations["ListDictGTTSVoices"];
  };
  "/dict/country": {
    /** list all countries */
    get: operations["ListDictCountry"];
  };
  "/dict/lerg": {
    /** Upload LERG csv file */
    post: operations["UploadDictLERG"];
  };
  "/token": {
    /** Create new Bearer token */
    post: operations["CreateToken"];
  };
  "/token/list": {
    /** Get token list */
    get: operations["GetTokenList"];
  };
  "/token/{uuid}": {
    /** Modify token */
    patch: operations["ModifyToken"];
  };
  "/token/all": {
    /** Delete all tokens */
    delete: operations["RemoveAll"];
  };
  "/token/{token}": {
    /** Delete token */
    delete: operations["RemoveByTokenString"];
  };
  "/janus/conn": {
    /** Create new Janus Connections */
    post: operations["CreateJanusConnections"];
    /** Delete all Janus Connections */
    delete: operations["DeleteALLJanusConnections"];
    /** Modify Janus Connections */
    patch: operations["ModifyJanusConnection"];
  };
  "/janus/conn/{uuid}/{id}": {
    /** Get next free Janus Connection */
    get: operations["GetNextJanusConnectionByJanusSessionUUID"];
  };
  "/janus/conn/{uuid}": {
    /** Get all connections list */
    get: operations["GetJanusConnections"];
    /** Delete all Janus Connections related to Janus Session */
    delete: operations["DeleteJanusConnectionsByJanusSessionUUID"];
  };
  "/janus/session": {
    /** Create new Janus Session */
    post: operations["CreateJanusSession"];
  };
  "/janus/session/list": {
    /** Get Full Janus sessions list */
    get: operations["GetJanusSessionsList"];
  };
  "/janus/session/owner": {
    /** Get Janus sessions list */
    get: operations["GetJanusSessionsListByOwner"];
  };
  "/janus/session/account": {
    /** Get Janus Sessions related to user account */
    get: operations["GetJanusSessionsListByAccount"];
  };
  "/janus/session/{uuid}/roster": {
    /** Get Janus Session users related to JanusSession */
    get: operations["GetJanusSessionsRosterList"];
  };
  "/janus/session/{uuid}": {
    /** Get Janus Session extended info */
    get: operations["GetJanusSession"];
    /** Delete Janus session */
    delete: operations["RemoveJanusSessionByUUID"];
    /** Update Janus session */
    patch: operations["UpdateJanusSession"];
  };
  "/janus/session/{uuid}/whitelist": {
    /** Add SIP users to whitelist */
    post: operations["PutSIPUsersToJanusSessionWhitelist"];
  };
  "/janus/session/{uuid}/blacklist": {
    /** Add SIP users to blacklist */
    post: operations["PutSIPUsersToJanusSessionBlacklist"];
  };
  "/janus/session/{uuid}/blacklist/{id}": {
    /** Remove JanusSessionUser from blacklist */
    delete: operations["RemoveSIPUserFromJanusSessionBlacklist"];
  };
  "/janus/session/{uuid}/whitelist/{id}": {
    /** Remove JanusSessionUser from whitelist */
    delete: operations["RemoveSIPUserFromJanusSessionWhitelist"];
  };
  "/janus/session/{session_uuid}/user": {
    /** Create JanusSessionUser */
    post: operations["CreateJanusSessionUser"];
  };
  "/janus/session/{session_uuid}/user/{id}": {
    /** Remove SIP user */
    delete: operations["RemoveJanusSessionUser"];
    /** Modify JanusSessionUser */
    patch: operations["ModifyJanusSessionUser"];
  };
  "/profile/messaging": {
    /** Get Messaging profile list */
    get: operations["ListMessagingProfiles"];
    /** Create new Messaging profile */
    post: operations["CreateMessagingProfile"];
  };
  "/profile/messaging/{uuid}": {
    /** Get extended Messaging profile info */
    get: operations["GetMessagingProfileByUUID"];
    /** Remove Messaging profile */
    delete: operations["RemoveMessagingProfileByUUID"];
    /** Change Messaging profile */
    patch: operations["ModifyMessagingProfile"];
  };
  "/profile/messaging/{uuid}/tnleases": {
    /** Get leases list linked to Messaging profile */
    get: operations["GetMessagingProfileLeasesByUUID"];
  };
  "/order/tn": {
    /** Create new tn order */
    post: operations["CreateTNOrder"];
  };
  "/order/price": {
    /** Get Order price */
    post: operations["GetOrderPrice"];
  };
  "/order": {
    /** Get order list */
    get: operations["ListOrders"];
  };
  "/order/{uuid}": {
    /** Get extended order info */
    get: operations["GetOrderByUUID"];
  };
  "/profile/outbound_voice": {
    /** Get Outbound voice profile list */
    get: operations["ListOutboundVoiceProfiles"];
    /** Create new Outbound voice profile */
    post: operations["CreateOutboundVoiceProfile"];
  };
  "/profile/outbound_voice/{uuid}": {
    /** Get extended Outbound voice profile info */
    get: operations["GetOutboundVoiceProfileByUUID"];
    /** Remove Outbound voice profile */
    delete: operations["RemoveOutboundVoiceProfileByUUID"];
    /** Change Outbound voice profile */
    patch: operations["ModifyOutboundVoiceProfile"];
  };
  "/payment": {
    /** Get user payments list */
    get: operations["ListPayments"];
    /** Create payment */
    post: operations["CreatePayment"];
  };
  "/payment/{uuid}": {
    /** Get payment by uuid */
    get: operations["GetPaymentByUUID"];
    /** Update payment state */
    patch: operations["UpdatePayment"];
  };
  "/settings": {
    /** Get settings */
    get: operations["GetSettings"];
  };
  "/sip/connection/{uuid}/tnlease": {
    /** Get SIP Connection assigned TNLease's */
    get: operations["GetSIPConnectionTNLeasesList"];
    /** Assign TNLeases to SIP Connection */
    post: operations["AssignTNLeasesToSIPConnection"];
  };
  "/sip/connection": {
    /** Get sip connections list */
    get: operations["ListSIPConnections"];
    /** Create new sip connection */
    post: operations["CreateSIPConnection"];
  };
  "/sip/connection/{uuid}": {
    /** Get extended sip connection info */
    get: operations["GetSIPConnectionByUUID"];
    /** Remove sip connection */
    delete: operations["RemoveSIPConnectionByID"];
    /** Change sip connection */
    patch: operations["ModifySIPConnection"];
  };
  "/sip/app/call/flow/{uuid}": {
    /** Get static SIP Control app Call flow */
    get: operations["GetSIPControlAppStaticCallFlow"];
    /** Save static SIP Control app Call flow */
    post: operations["SaveSIPControlAppStaticCallFlow"];
    /** Delete Save static SIP Control app Call flow */
    delete: operations["RemoveSIPControlAppStaticCallFlow"];
  };
  "/sip/app/{uuid}/logs": {
    /** Search sip control app call flow logs */
    post: operations["SearchCallFlowLogs"];
  };
  "/sip/app/call/online": {
    /** Get online SIP Control app calls */
    get: operations["GetSIPControlAppCallsList"];
  };
  "/sip/app/call/{uuid}": {
    /** Get SIP Control app call */
    get: operations["GetSIPControlAppCall"];
    /** Post call XML */
    post: operations["ExecuteSIPControlAppCallExecuteCallFlow"];
  };
  "/sip/app/call/search": {
    /** Search sca calls */
    post: operations["SearchSCACalls"];
  };
  "/sip/app/{uuid}/tnlease": {
    /** Get SIP Control app assigned TNLease's */
    get: operations["GetSIPControlAppTNLeasesList"];
    /** Assign TNLeases to SIP Control App */
    post: operations["AssignTNLeasesToSIPControlApp"];
  };
  "/sip/app": {
    /** Get sip control app list */
    get: operations["ListSIPControlApps"];
    /** Create new sip control app */
    post: operations["CreateSIPControlApp"];
  };
  "/sip/app/{uuid}": {
    /** Get extended sip control app info */
    get: operations["GetSIPControlAppByUUID"];
    /** Remove sip control app */
    delete: operations["RemoveSIPControlAppByUUID"];
    /** Change sip control app */
    patch: operations["ModifySIPControlApp"];
  };
  "/sip/domain": {
    /** Get sip domain list */
    get: operations["ListSIPDomains"];
    /** Create new sip domain */
    post: operations["CreateSIPDomain"];
  };
  "/sip/domain/{domain}": {
    /** Get extended sip domain info */
    get: operations["GetSIPDomainByDomainName"];
    /** Remove sip domain */
    delete: operations["RemoveSIPDomainByDomainName"];
    /** Change sip domain */
    patch: operations["ModifySIPDomainByDomainName"];
  };
  "/sip/domain/{domain}/switch": {
    /** Get sip switches by sip domain */
    get: operations["ListSIPSwitchesBySIPDomainUUID"];
    /** Create new sip switch */
    post: operations["CreateSIPSwitch"];
  };
  "/sip/domain/{domain}/switch/{uuid}": {
    /** Get extended sip switch info */
    get: operations["GetSIPSwitchByUUID"];
    /** Remove sip switch */
    delete: operations["RemoveSIPSwitchByUUID"];
    /** Change sip switch */
    patch: operations["ModifySIPSwitch"];
  };
  "/sip/domain/{domain}/user": {
    /** Get sip users by sip domain */
    get: operations["ListSIPUsersBySIPDomainUUID"];
    /** Create new sip user */
    post: operations["CreateSIPUser"];
  };
  "/sip/domain/{domain}/user/{uuid}": {
    /** Get extended sip user info */
    get: operations["GetSIPUserByUUID"];
    /** Remove sip user */
    delete: operations["RemoveSIPUserByUUID"];
    /** Change sip user */
    patch: operations["ModifySIPUser"];
  };
  "/sip/domain/{domain}/invite": {
    /** Get sip domain invites */
    get: operations["ListSIPUserInvites"];
    /** Create new sip domain invite */
    post: operations["CreateSIPUserInvite"];
  };
  "/sip/domain/{domain}/invite/{uuid}": {
    /** Remove sip user invite */
    delete: operations["RemoveSIPUserInviteByUUID"];
    /** Change sip user invite */
    patch: operations["ModifySIPUserInvite"];
  };
  "/sip/product": {
    /** Get SIP Connection products list */
    get: operations["GetSIPProductsList"];
  };
  "/sip/tech_prefix/{tn}/{domain}": {
    /** Get tech prefix route */
    get: operations["GetTechPrefixRoute"];
  };
  "/app/invite/{token}": {
    /** Check for sip user invite */
    get: operations["CheckSIPDomainByInviteApp"];
    /** Create SIP user using invite code */
    post: operations["RegisterSIPUserByInviteApp"];
  };
  "/app": {
    /** Get current sip user */
    get: operations["GetSIPUserApp"];
    /** Change current sip user */
    patch: operations["ModifySIPUserApp"];
  };
  "/app/password_reset": {
    /** Request sip user password reset email */
    get: operations["RequestSIPUserPasswordResetEmailApp"];
    /** Change sip user password using reset token */
    post: operations["ChangeSIPUserPasswordViaResetTokenApp"];
  };
  "/app/avatar": {
    /** Upload sip user user avatar */
    post: operations["UploadSIPUserAvatarApp"];
  };
  "/app/users": {
    /** Get current sip users with same sip domain */
    get: operations["GetSIPUsersWithSameDomainApp"];
  };
  "/app/group": {
    /** Get current sip user groups list */
    get: operations["GetSIPGroupsListApp"];
    /** Create SIP user group */
    post: operations["CreateSIPUserGroupApp"];
  };
  "/app/group/{uuid}": {
    /** Delete sip user group */
    delete: operations["RemoveSIPUserGroupApp"];
    /** Change sip user group */
    patch: operations["ModifySIPUserGroupApp"];
  };
  "/app/group/{uuid}/users": {
    /** Get sip user group users */
    get: operations["GetSIPUserGroupUsersApp"];
    /** Add sip users to group */
    post: operations["AddSIPUsersToSIPUserGroupApp"];
  };
  "/app/group/{uuid}/users/{sip_user_uuid}": {
    /** Remove sip user from sip user group */
    delete: operations["RemoveSIPUserFromSIPUserGroupApp"];
    /** Add sip user to group */
    patch: operations["AddSIPUserToSIPUserGroupApp"];
  };
  "/sms": {
    /** Create sms send request */
    post: operations["SendSMS"];
  };
  "/sms/outbound/{uuid}": {
    /** Get extended outbound sms info */
    get: operations["GetSMSByUUID"];
  };
  "/sms/inbound/{uuid}": {
    /** Get extended inbound sms info */
    get: operations["GetSMSIByUUID"];
  };
  "/sms/search/outbound": {
    /** Search Outbound SMS */
    post: operations["SearchOutboundSMS"];
  };
  "/sms/search/inbound": {
    /** Search Inbound SMS */
    post: operations["SearchInboundSMS"];
  };
  "/sms/search": {
    /** Search Inbound & Outbound SMS */
    post: operations["SearchSMSISMS"];
  };
  "/lease/tn/search": {
    /** Search tn leases */
    post: operations["SearchTNLeases"];
  };
  "/lease/tn/{tn}/tn": {
    /** Get extended lease info by TN */
    get: operations["GetTNLeaseByTN"];
  };
  "/lease/tn/{uuid}": {
    /** Get extended lease info */
    get: operations["GetTNLeaseByUUID"];
    /** Release tn */
    delete: operations["RemoveTNLeaseByUUID"];
    /** Change TN Lease */
    patch: operations["ModifyTNLease"];
  };
  "/profile/tn": {
    /** Get profile list */
    get: operations["ListTNProfiles"];
  };
  "/profile/tn/special_prices": {
    /** Get special prices info */
    get: operations["GetTNSpecialPricesByAccount"];
  };
  "/profile/tn/{uuid}": {
    /** Get extended profile info */
    get: operations["GetTNProfileByUUID"];
  };
  "/tn/search": {
    /** Advanced TN Search */
    post: operations["Search"];
  };
  "/transaction/search": {
    /** Search transactions */
    post: operations["SearchTransactions"];
  };
  "/transaction/{uuid}": {
    /** Get extended transaction info */
    get: operations["GetTransactionByUUID"];
  };
  "/transaction/report/invoice": {
    /** Get Invoice report */
    get: operations["GetTransactionInvoiceReport"];
  };
  "/transaction/report/dashboard/{ref_type}": {
    /** Get Dashboard report */
    get: operations["GetTransactionDashboardReport"];
  };
  "/user/cart": {
    /** Get all user cart entries */
    get: operations["GetCartEntries"];
    /** Create new cart entry */
    post: operations["CreateUserCartEntry"];
    /** Clear user cart */
    delete: operations["ClearUserCart"];
  };
  "/user/cart/{uuid}": {
    /** Delete user cart entry */
    delete: operations["DeleteUserCartEntry"];
    /** Change user cart entry */
    patch: operations["UpdateUserCartEntry"];
  };
  "/user": {
    /** Get detail information of a user */
    get: operations["GetCurrentUser"];
    /** Create new user */
    post: operations["CreateUser"];
  };
  "/user/password_reset": {
    /** Request password reset email */
    get: operations["RequestUserPasswordResetEmail"];
    /** Change password using reset token */
    post: operations["ChangeUserPasswordViaResetToken"];
  };
  "/user/{uuid}": {
    /** Get detail information of a user by UUID */
    get: operations["GetUserByUUID"];
    /** Delete user */
    delete: operations["DeleteUserByUUID"];
    /** Change user information by UUID */
    patch: operations["UpdateUserByUUID"];
  };
  "/user/{uuid}/avatar": {
    /** Upload user avatar */
    post: operations["UploadAvatar"];
    /** Delete user avatar */
    delete: operations["RemoveAvatar"];
  };
}

export interface components {
  schemas: {
    EAccountOfficeHoursType:
      | "nonworking"
      | "lunchtime"
      | "coffeebreak"
      | "weekends";
    EDayOfWeek: "sun" | "mon" | "tue" | "wed" | "thu" | "fri" | "sat";
    EAccountLevel: "ServiceAccount" | "Level0" | "Level1" | "Level2";
    IDICTTimeZone: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      country_code: string;
      name: string;
      utc_offset: number;
      utc_dst_offset: number;
      latitude: string;
      longitude: string;
      note?: string;
    };
    EGender: "Male" | "Female" | "Other";
    EUserRole: "Admin" | "User" | "Provider";
    IAccount: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name: string;
      email: string;
      level: components["schemas"]["EAccountLevel"];
      balance: number;
      class4_id?: number;
      deleted_on?: string;
      time_zone: components["schemas"]["IDICTTimeZone"];
      users: components["schemas"]["IUser"][];
      admin: components["schemas"]["IUser"];
      messaging_profile_default: components["schemas"]["IMessagingProfile"];
      messaging_profiles: components["schemas"]["IMessagingProfile"][];
      addresses: components["schemas"]["IAddress"][];
    };
    UUID: string;
    IUser: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      email: string;
      password?: string;
      phone_number?: string;
      first_name?: string;
      last_name?: string;
      avatar?: string;
      gender?: components["schemas"]["EGender"];
      dob?: string;
      role: components["schemas"]["EUserRole"];
      gmail_user_id?: string;
      facebook_user_id?: string;
      apple_user_id?: string;
      wechat_user_id?: string;
      deleted_on?: string;
      token?: string;
      account: components["schemas"]["IAccount"];
    };
    IMessagingProfile: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      /** A user-assigned name to help manage the messaging profile. */
      name: string;
      callback_url?: string;
      callback_url2?: string;
      number_pool_enable: boolean;
      long_code_weight: number;
      tollfree_weight: number;
      skip_unhealthy_tns: boolean;
      sticky_sender: boolean;
      /** Profile owner account */
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    IDICTCountry: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      name: string;
      a2: string;
      a3: string;
      n: number;
      country_code?: number;
      national_code?: number;
    };
    IAddress: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name: string;
      is_physical: boolean;
      is_billing: boolean;
      is_shipping: boolean;
      address1: string;
      address2?: string;
      zip_code: string;
      city: string;
      country: components["schemas"]["IDICTCountry"];
      user: components["schemas"]["IUser"];
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    IAccountOfficeHours: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name?: string;
      type: components["schemas"]["EAccountOfficeHoursType"];
      dow: components["schemas"]["EDayOfWeek"];
      time_from: number;
      time_to: number;
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    IAccountOfficeHoursResponse: {
      success: boolean;
      payload: components["schemas"]["IAccountOfficeHours"];
    };
    IErrorResponse: {
      success: boolean;
      message: string;
      status?: number;
    };
    IAccountOfficeHoursNewParams: {
      /** Account Office hours - entry name */
      name?: string;
      type: components["schemas"]["EAccountOfficeHoursType"];
      dow: components["schemas"]["EDayOfWeek"];
      /** time in seconds from 00:00:00 */
      time_from: number;
      /** time in seconds to 23:59:59 */
      time_to: number;
    };
    IAccountOfficeHourssResponse: {
      success: boolean;
      payload: components["schemas"]["IAccountOfficeHours"][];
    };
    IAccountOfficeHoursUpdateParams: {
      /** Account Office hours - entry name */
      name?: string;
      type?: components["schemas"]["EAccountOfficeHoursType"];
      dow?: components["schemas"]["EDayOfWeek"];
      /** time in seconds from 00:00:00 */
      time_from?: number;
      /** time in seconds to 23:59:59 */
      time_to?: number;
    };
    IResponse: {
      success: boolean;
      payload: { [key: string]: any };
    };
    IAccountResponse: {
      success: boolean;
      payload: components["schemas"]["IAccount"];
    };
    IUserResponse: {
      success: boolean;
      payload: components["schemas"]["IUser"];
    };
    IAccountNewParams: {
      name: string;
      email: string;
    };
    IUserNewParams: {
      email: string;
      password: string;
      phone_number?: string;
      first_name?: string;
      last_name?: string;
      gender?: components["schemas"]["EGender"];
      dob?: string;
      avatar?: string;
      role?: components["schemas"]["EUserRole"];
      account?: components["schemas"]["IAccountNewParams"];
    };
    IUsersResponse: {
      success: boolean;
      payload: components["schemas"]["IUser"][];
    };
    IAddressResponse: {
      success: boolean;
      payload: components["schemas"]["IAddress"];
    };
    IAddressNewParams: {
      name: string;
      is_physical: boolean;
      is_billing: boolean;
      is_shipping: boolean;
      address1: string;
      address2?: string;
      zip_code: string;
      city: string;
      /** a2 field from a DICTCountry dictionary */
      country: string;
    };
    IAddressesResponse: {
      success: boolean;
      payload: components["schemas"]["IAddress"][];
    };
    IAddressUpdateParams: {
      name?: string;
      is_physical?: boolean;
      is_billing?: boolean;
      is_shipping?: boolean;
      address1?: string;
      address2?: string;
      zip_code?: string;
      city?: string;
      /** a2 field from a DICTCountry dictionary */
      country?: string;
    };
    EScheduleQueueActions:
      | "expired_tokens"
      | "expired_special_prices"
      | "tn_leases_autorenew"
      | "tn_leases_release_notification"
      | "tn_autorelease"
      | "class4_products_sync"
      | "invoice_send";
    IAdminClass4DIDPrefixCreateParams: {
      tnleases: components["schemas"]["UUID"][];
    };
    IAdminTNLeaseCreateParams: {
      tns: number[];
      tn_profile: string;
      autorenew?: boolean;
      messaging_profile: components["schemas"]["UUID"];
    };
    ILoginResponse: {
      success: boolean;
      payload: components["schemas"]["IUser"];
    };
    ISIPAuthPayload: {
      /** SIPUser / SIPSwitch uuid */
      uuid: components["schemas"]["UUID"];
      /** SIPDomain domain name */
      sip_domain: string;
      /** SIPConnection / SIPControlApp tech_prefix */
      tech_prefix: string;
      /** SIPUser Accept sip calls only from a same domain */
      same_domain_calls_only: boolean;
      /** SIPSwitch remote ip */
      remote_ip?: string;
      /** SIPSwitch remote domain */
      remote_domain?: string;
      /** SIPUser login */
      login?: string;
      /** SIPUser ha1 token */
      ha1?: string;
      /** SIPUser ha1b token */
      ha1b?: string;
    };
    ISIPAuthResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPAuthPayload"];
    };
    IDICTTimeZonesResponse: {
      success: boolean;
      payload: components["schemas"]["IDICTTimeZone"][];
    };
    EDICTGTTSVoiceType: "Standard" | "WaveNet";
    EDICTGTTSVoiceGender: "MALE" | "FEMALE";
    IDICTGTTSVoice: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      type: components["schemas"]["EDICTGTTSVoiceType"];
      code: string;
      name: string;
      gender: components["schemas"]["EDICTGTTSVoiceGender"];
      naturalSampleRateHertz?: number;
    };
    IDICTGTTSVoicesResponse: {
      success: boolean;
      payload: components["schemas"]["IDICTGTTSVoice"][];
    };
    IDICTCountriesResponse: {
      success: boolean;
      payload: components["schemas"]["IDICTCountry"][];
    };
    IDICTLERGUploadPayload: {
      accepted: number;
      failed: number;
      total: number;
      errors: { [key: string]: any }[];
    };
    IDICTLERGUploadResponse: {
      success: boolean;
      payload: components["schemas"]["IDICTLERGUploadPayload"];
    };
    IDICTLERGVerifyResponse: {
      success: boolean;
      payload: {
        message?: string;
        lerg?: boolean;
        lrn: boolean;
      };
    };
    IToken: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      token: string;
      name?: string;
      expired_on: string;
      user: components["schemas"]["IUser"];
    };
    ITokenResponse: {
      success: boolean;
      payload: components["schemas"]["IToken"];
    };
    ITokenNewParams: {
      name: string;
      /** Time to live (in seconds) */
      ttl?: number;
    };
    ITokensResponse: {
      success: boolean;
      payload: components["schemas"]["IToken"][];
    };
    ITokenUpdateParams: {
      name?: string;
      /** Time to live (in seconds) */
      ttl?: number;
    };
    EEmailTemplate:
      | "invoice"
      | "tnorder_success"
      | "tnorder_rejected"
      | "tnleases_released"
      | "tnleases_releasing"
      | "payment_success"
      | "payment_failed"
      | "user_password_changed"
      | "user_reset_password"
      | "user_welcome_letter"
      | "report_daily"
      | "report_weekly"
      | "report_monthly";
    IEmailUrl: {
      auth: string | null;
      hash: string | null;
      host: string | null;
      hostname: string | null;
      href: string;
      path: string | null;
      pathname: string | null;
      protocol: string | null;
      search: string | null;
      slashes: boolean | null;
      port: string | null;
      query: string | null;
    };
    IEmailAttachmentLike: {
      /** String, Buffer or a Stream contents for the attachmentent */
      content?: Partial<string> & Partial<string>;
      /** path to a file or an URL (data uris are allowed as well) if you want to stream the file instead of including it (better for larger attachments) */
      path?: Partial<string> & Partial<components["schemas"]["IEmailUrl"]>;
    };
    IEmailAttachment: {
      /** String, Buffer or a Stream contents for the attachmentent */
      content?: Partial<string> & Partial<string>;
      /** path to a file or an URL (data uris are allowed as well) if you want to stream the file instead of including it (better for larger attachments) */
      path?: Partial<string> & Partial<components["schemas"]["IEmailUrl"]>;
      /** filename to be reported as the name of the attached file, use of unicode is allowed. If you do not want to use a filename, set this value as false, otherwise a filename is generated automatically */
      filename?: Partial<string> & Partial<"false">;
      /** optional content id for using inline images in HTML message source. Using cid sets the default contentDisposition to 'inline' and moves the attachment into a multipart/related mime node, so use it only if you actually want to use this attachment as an embedded image */
      cid?: string;
      /** If set and content is string, then encodes the content to a Buffer using the specified encoding. Example values: base64, hex, binary etc. Useful if you want to use binary attachments in a JSON formatted e-mail object */
      encoding?: string;
      /** optional content type for the attachment, if not set will be derived from the filename property */
      contentType?: string;
      /** optional transfer encoding for the attachment, if not set it will be derived from the contentType property. Example values: quoted-printable, base64. If it is unset then base64 encoding is used for the attachment. If it is set to false then previous default applies (base64 for most, 7bit for text). */
      contentTransferEncoding?: Partial<
        "7bit" | "base64" | "quoted-printable"
      > &
        Partial<"false">;
      /** optional content disposition type for the attachment, defaults to ‘attachment’ */
      contentDisposition?: "attachment" | "inline";
      /** is an object of additional headers */
      headers?: Partial<{
        [key: string]: Partial<string> &
          Partial<string[]> &
          Partial<{
            value: string;
            prepared: boolean;
          }>;
      }> &
        Partial<
          {
            value: string;
            key: string;
          }[]
        >;
      /** an optional value that overrides entire node content in the mime message. If used then all other options set for this node are ignored. */
      raw?: Partial<string> &
        Partial<string> &
        Partial<components["schemas"]["IEmailAttachmentLike"]>;
    };
    EmailMessage: {
      attachments: components["schemas"]["IEmailAttachment"][];
    };
    EEmailState: "created" | "sent" | "failed";
    IEmail: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      from_name: string;
      from_email: string;
      to_name: string;
      to_email: string;
      cc_email?: string;
      bcc_email?: string;
      subject: string;
      template: components["schemas"]["EEmailTemplate"];
      params: { [key: string]: any };
      message?: components["schemas"]["EmailMessage"];
      sent_result?: { [key: string]: any };
      error?: string;
      state: components["schemas"]["EEmailState"];
      account: components["schemas"]["IAccount"];
    };
    IEmailResponse: {
      success: boolean;
      payload: components["schemas"]["IEmail"];
    };
    IEmailNewParams: {
      from_name?: string;
      from_email?: string;
      to_name: string;
      to_email: string;
      cc_email?: string;
      bcc_email?: string;
      subject: string;
      template: components["schemas"]["EEmailTemplate"];
      params: { [key: string]: any };
    };
    IEmailsResponse: {
      success: boolean;
      payload: components["schemas"]["IEmail"][];
    };
    ISIPUser: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      login: string;
      ha1?: string;
      ha1b?: string;
      first_name?: string;
      last_name?: string;
      email?: string;
      phone_number?: string;
      avatar?: string;
      dob?: string;
      gender?: components["schemas"]["EGender"];
      /** Accept sip calls only from a same domain */
      same_domain_calls_only: boolean;
      groups: components["schemas"]["ISIPUserGroup"][];
      sip_domain: components["schemas"]["ISIPDomain"];
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    ISIPUserGroup: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name: string;
      owner: components["schemas"]["ISIPUser"];
      users: components["schemas"]["ISIPUser"][];
    };
    ESIPProductType: "public" | "private";
    ISIPProduct: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      id: number;
      name: string;
      description?: string;
      type: components["schemas"]["ESIPProductType"];
      tech_prefix: number;
      rate_table_id: number;
      route_plan_id: number;
    };
    ISIPDomain: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      domain: string;
      account: components["schemas"]["IAccount"];
      sip_connection: components["schemas"]["ISIPConnection"];
      sip_control_app: components["schemas"]["ISIPControlApp"];
      sip_users: components["schemas"]["ISIPUser"][];
      sip_user_invites: components["schemas"]["ISIPUserInvite"][];
      sip_switches: components["schemas"]["ISIPSwitch"][];
      outbound_voice_profile: components["schemas"]["IOutboundVoiceProfile"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    EClass4RPIDIDType: "None" | "Subscriber" | "User" | "Term" | "Proxy";
    EClass4RPID: "Never" | "Pass Through" | "Always";
    EClass4CliType: "white" | "white non cli" | "gray";
    EClass4YesNo: "Yes" | "No";
    EClass4BillingByPort: "by minutes" | "by port";
    EClass4UpDown: "Up" | "Down";
    EClass4USOther: "other" | "intra" | "inter" | "highest";
    EClass4MediaType:
      | "Bypass Media"
      | "Proxy Media + Transcoding"
      | "Proxy Media";
    EClass4TrunkType: "Termination Traffic" | "DID Traffic";
    IClass4ResourceIpRegGateway: {
      rofile_id?: number;
      reg_srv_ip?: string;
      username?: string;
      reg_srv_port?: number;
      password?: string;
      expires?: number;
    };
    EClass4PassThrough: "transparent" | "not pass through the ban";
    EClass4ProfitType: "percentage" | "value";
    IClass4ResourceIpRegUser: {
      password?: string;
      profile_id?: number;
      username?: string;
    };
    EClass4ServiceType: "Self Service" | "Standand Deck";
    EClass4JurisdictionUseDnis: "LRN" | "DNIS";
    EClass4HostRoutingStrategy: "top-down" | "round-robin";
    EClass4RPIDScreen: "None" | "No" | "Yes" | "Proxy";
    EClass4AuthType:
      | "Authorized by Host Only"
      | "Authorized by SIP Registration"
      | "Register to gateway";
    EClass4ResourceIPAddrType: "ip" | "host";
    IClass4ResourceIP: {
      fqdn?: string;
      port?: number;
      ip?: string;
      addr_type?: components["schemas"]["EClass4ResourceIPAddrType"];
    };
    EClass4RPIDParty: "None" | "Calling" | "Called" | "Proxy";
    EClass4RPIDPrivacy:
      | "None"
      | "Full"
      | "Name"
      | "Url"
      | "OFF"
      | "Ipaddr"
      | "Proxy";
    IClass4ResourcePrefix: {
      tech_prefix?: string;
      rate_table_id?: number;
      product_id?: number;
      routing_plan_id: number;
      code?: string;
      code_cps?: number;
      trunk_id?: number;
      code_cap?: number;
    };
    IClass4Trunk: {
      name: string;
      rpid_id_type?: components["schemas"]["EClass4RPIDIDType"];
      pdd?: number;
      rpid?: components["schemas"]["EClass4RPID"];
      ignore_early_media?: boolean;
      cli_type?: components["schemas"]["EClass4CliType"];
      pci?: components["schemas"]["EClass4YesNo"];
      call_limit?: number;
      is_active?: boolean;
      t38?: boolean;
      billing_method?: components["schemas"]["EClass4BillingByPort"];
      ani_cap_limit?: number;
      min_profit_value?: number;
      rate_rounding?: components["schemas"]["EClass4UpDown"];
      account_id?: string;
      ignore_early_no_sdp?: boolean;
      enfource_cid?: boolean;
      oli?: components["schemas"]["EClass4YesNo"];
      codecs?: string[];
      media_timeout?: number;
      us_other?: components["schemas"]["EClass4USOther"];
      bypass_media?: components["schemas"]["EClass4MediaType"];
      trunk_type2?: components["schemas"]["EClass4TrunkType"];
      reg_gateway?: components["schemas"]["IClass4ResourceIpRegGateway"][];
      pass_through?: components["schemas"]["EClass4PassThrough"];
      dnis_cap_limit?: number;
      min_duration?: number;
      min_profit_type?: components["schemas"]["EClass4ProfitType"];
      dnis_cps_limit?: number;
      reg_user?: components["schemas"]["IClass4ResourceIpRegUser"][];
      service_type?: components["schemas"]["EClass4ServiceType"];
      amount_per_port?: number;
      rate_decimal?: number;
      jurisdiction_use_dnis?: components["schemas"]["EClass4JurisdictionUseDnis"];
      paid?: components["schemas"]["EClass4YesNo"];
      host_routing_strategy?: components["schemas"]["EClass4HostRoutingStrategy"];
      rate_use_rpid?: boolean;
      ring_timeout?: number;
      ignore_ring?: boolean;
      enable_global_404_blocking?: boolean;
      pass_lrn?: number;
      rpid_screen?: components["schemas"]["EClass4RPIDScreen"];
      auth_type?: components["schemas"]["EClass4AuthType"];
      ip?: components["schemas"]["IClass4ResourceIP"][];
      ani_cps_limit?: number;
      cps_limit?: number;
      max_duration?: number;
      rate_table_id?: number;
      priv?: components["schemas"]["EClass4YesNo"];
      rpid_party?: components["schemas"]["EClass4RPIDParty"];
      rpid_privacy?: components["schemas"]["EClass4RPIDPrivacy"];
      transaction_fee_id?: number;
      codes?: string[];
      media_type?: components["schemas"]["EClass4MediaType"];
      div?: components["schemas"]["EClass4YesNo"];
      prefixes?: components["schemas"]["IClass4ResourcePrefix"][];
      display_name?: boolean;
    };
    IClass4IngressTrunk: components["schemas"]["IClass4Trunk"];
    IClass4EgressTrunk: components["schemas"]["IClass4Trunk"];
    ISIPConnection: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      /** A user-assigned name to help manage the application. */
      name: string;
      is_active: boolean;
      tech_prefix: number;
      product: components["schemas"]["ISIPProduct"];
      ip?: string;
      port: number;
      hostname?: string;
      sip_domains: components["schemas"]["ISIPDomain"][];
      class4_ingress_trunk_id: number;
      class4_ingress_trunk_settings: components["schemas"]["IClass4IngressTrunk"];
      class4_ingress_resource_ip_id: number;
      class4_egress_trunk_id: number;
      class4_egress_trunk_settings: components["schemas"]["IClass4EgressTrunk"];
      class4_egress_resource_ip_id: number;
      class4_tech_prefix_id: number;
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    ESIPControlAppMethod: "GET" | "POST";
    EXmlTransformerElementName:
      | "Dial"
      | "Gather"
      | "Hangup"
      | "Pause"
      | "Play"
      | "Reject"
      | "Redirect"
      | "Record"
      | "Say"
      | "Callback"
      | "Switch"
      | "Case"
      | "Default"
      | "Error";
    ITN: {
      tn: number;
      class4_did_id?: number;
      registered: boolean;
      tnlease?: components["schemas"]["ITNLease"];
      profile: components["schemas"]["ITNProfile"];
      deleted_on?: string;
    };
    ETNOrderState: "created" | "verify" | "processing" | "success" | "failed";
    ITNOrderItem: {
      /** Voice feature */
      voice?: boolean;
      /** Fax feature */
      fax?: boolean;
      /** Sms feature */
      sms?: boolean;
      /** Mms feature */
      mms?: boolean;
      /** Emergency feature */
      emergency?: boolean;
      tn: number;
      /** TNProfile name */
      profile?: string;
      /** Autorenew tn leases */
      autorenew?: boolean;
    };
    _IBaseUpdateParams: { [key: string]: any };
    IOrderUpdateParams: components["schemas"]["_IBaseUpdateParams"];
    ITNOrderNewParams: {
      items: components["schemas"]["ITNOrderItem"][];
    };
    ITNOrderError: {
      item: components["schemas"]["ITNOrderItem"];
      reason: string;
      description?: string;
    };
    ITNLease: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      tn: components["schemas"]["ITN"];
      account: components["schemas"]["IAccount"];
      tnorder: components["schemas"]["ITNOrder"];
      expired_on: string;
      autorenew: boolean;
      messaging_profile: components["schemas"]["IMessagingProfile"];
      class4_product_item_id?: number;
      class4_resource_prefix_id?: number;
      sip_connection?: components["schemas"]["ISIPConnection"];
      sip_control_app?: components["schemas"]["ISIPControlApp"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    ITNOrder: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      state: components["schemas"]["ETNOrderState"];
      /** Original request object */
      request?: components["schemas"]["ITNOrderNewParams"];
      /** Accepted items */
      items: components["schemas"]["ITNOrderItem"][];
      /** Rejected items */
      errors: components["schemas"]["ITNOrderError"][];
      /** Ordered TNs */
      tns: components["schemas"]["ITN"][];
      tnleases: components["schemas"]["ITNLease"][];
      /** TN Order Account */
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
    };
    ISIPControlApp: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      /** A user-assigned name to help manage the application. */
      name: string;
      is_active: boolean;
      tech_prefix: number;
      product: components["schemas"]["ISIPProduct"];
      sip_domains: components["schemas"]["ISIPDomain"][];
      class4_ingress_trunk_id: number;
      class4_ingress_trunk_settings: components["schemas"]["IClass4IngressTrunk"];
      class4_ingress_resource_ip_id: number;
      class4_egress_trunk_id: number;
      class4_egress_trunk_settings: components["schemas"]["IClass4EgressTrunk"];
      class4_egress_resource_ip_id: number;
      class4_tech_prefix_id: number;
      /** SIP control app owner account */
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
      /**
       * Webhooks for this application will be sent to this URL. Must include a scheme such as 'https'.
       *
       * `state`, `from` and `to` will be sent as query params
       */
      webhook_url: string;
      /**
       * Webhook request type
       *
       * in case of POST method selected, full ISIPControlAppCall entity will be sent as body
       */
      webhook_method: components["schemas"]["ESIPControlAppMethod"];
      /**
       * If null, then there is no timeout, then opentact will not activately hangup the cause.
       *
       * timeout in ms, it resets on redirect. 0 to disable (OS limit applies)
       */
      webhook_request_timeout: number;
      /**
       * Webhooks for this application will be sent to this URL. Must include a scheme such as 'https'.
       *
       * `from` and `to` will be sent as query params
       */
      call_flow_url: string;
      /**
       * If null, then there is no timeout, then opentact will not activately hagup the cause.
       *
       * timeout in ms, it resets on redirect. 0 to disable (OS limit applies)
       */
      call_flow_request_timeout: number;
      /** call flow execution logs */
      logs?: components["schemas"]["ILogCallFlow"][];
      /**
       * CallFlow request type
       *
       * in case of POST method selected, full ISIPControlAppCall entity will be sent as body
       */
      call_flow_method: components["schemas"]["ESIPControlAppMethod"];
    };
    EPriority: "high" | "normal" | "low";
    EProvider:
      | "inteliquent"
      | "syniverse"
      | "netnumber"
      | "class4"
      | "freeswitch"
      | "dev";
    IProviderTNFeatures: {
      /** Voice feature */
      voice?: boolean;
      /** Fax feature */
      fax?: boolean;
      /** Sms feature */
      sms?: boolean;
      /** Mms feature */
      mms?: boolean;
      /** Emergency feature */
      emergency?: boolean;
    };
    _IBaseEntity: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
    };
    IProvider: {
      name: components["schemas"]["EProvider"];
      user: components["schemas"]["IUser"];
      account: components["schemas"]["IAccount"];
      /** Support toll free numbers? */
      toll_free?: boolean;
      deleted_on?: string;
    };
    ITNProfile: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name?: string;
      description?: string;
      is_active: boolean;
      priority?: components["schemas"]["EPriority"];
      tn_provider?: components["schemas"]["IProvider"];
      /**
       * Toll free profile
       * Make sure related tn_provider is support for toll free numbers
       */
      toll_free?: boolean;
      /** tn search RegExp validator */
      tn_search_validator?: string;
      /** tn search placeholder */
      tn_search_placeholder?: string;
      /** tn search placeholder */
      tn_search_tooltip?: string;
      /** Class4 params: class4 resource_prefix.route_strategy_id */
      class4_resource_prefix_route_strategy_id: number;
      /** Class4 params: class4 resource_prefix.vendor.resource_id */
      class4_resource_prefix_vendor_resource_id: number;
      /** Class4 params: class4 resource_prefix.rate_table_id */
      class4_resource_prefix_rate_table_id: number;
      /** is number must be registered using Netnumber? */
      register_provider?: components["schemas"]["IProvider"];
      /** Non recurring cost */
      nrc: number;
      /** Monthly recurring cost */
      mrc: number;
      sms_provider?: components["schemas"]["IProvider"];
      /** Non recurring cost */
      sms_nrc: number;
      /** Monthly recurring cost */
      sms_mrc: number;
      sms_per_send_cost: number;
      sms_per_receive_cost: number;
      /** Non recurring cost */
      mms_nrc: number;
      /** Monthly recurring cost */
      mms_mrc: number;
      mms_per_send_cost: number;
      mms_per_receive_cost: number;
      voice_provider?: components["schemas"]["IProvider"];
      /** Non recurring cost */
      voice_nrc: number;
      /** Monthly recurring cost */
      voice_mrc: number;
      voice_incoming_per_min_cost: number;
      voice_outgoing_per_min_cost: number;
      /** Non recurring cost */
      fax_nrc: number;
      /** Monthly recurring cost */
      fax_mrc: number;
      fax_incoming_per_min_cost: number;
      fax_outgoing_per_min_cost: number;
      /** Non recurring cost */
      emergency_nrc: number;
      /** Monthly recurring cost */
      emergency_mrc: number;
      emergency_incoming_per_min_cost: number;
      emergency_outgoing_per_min_cost: number;
      country: components["schemas"]["IDICTCountry"];
    };
    ECallState: "online" | "offline";
    ECallSource: "freeswitch";
    ILogCallFlow: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      success: boolean;
      name: components["schemas"]["EXmlTransformerElementName"];
      command: { [key: string]: any };
      response: { [key: string]: any };
      call: components["schemas"]["ICall"];
      sip_control_app: components["schemas"]["ISIPControlApp"];
    };
    ICall: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      tn: components["schemas"]["ITN"];
      from: string;
      to: string;
      meta?: { [key: string]: any };
      state?: components["schemas"]["ECallState"];
      source: components["schemas"]["ECallSource"];
      logs?: components["schemas"]["ILogCallFlow"][];
      account: components["schemas"]["IAccount"];
    };
    ISIPUserInvite: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name: string;
      expired_on: string;
      token: string;
      sip_domain: components["schemas"]["ISIPDomain"];
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    ISIPSwitch: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name: string;
      description: string;
      remote_ip: string;
      remote_domain: string;
      sip_domain: components["schemas"]["ISIPDomain"];
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
    };
    IOutboundVoiceProfile: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      /** A user-assigned name to help manage the voice profile. */
      name: string;
      is_active: boolean;
      product: components["schemas"]["ISIPProduct"];
      tech_prefix: number;
      class4_ingress_trunk_id: number;
      class4_ingress_trunk_settings: components["schemas"]["IClass4IngressTrunk"];
      class4_ingress_resource_ip_id: number;
      class4_tech_prefix_id: number;
      /** Profile owner account */
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
      modified_by: components["schemas"]["IUser"];
      /** Associated TNLease (to set as from tn for outbound calls) */
      tn_lease: components["schemas"]["ITNLease"];
      /** Associated sip domains */
      sip_domains: components["schemas"]["ISIPDomain"][];
    };
    IJanusSessionOnlineDefaults: {
      video?: boolean;
      audio?: boolean;
      chat?: boolean;
      screencast?: boolean;
    };
    EJanusSessionAccessType: "blacklist" | "whitelist";
    IJanusSession: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name: string;
      description?: string;
      /** Janus session owner */
      owner: components["schemas"]["ISIPUser"];
      online_defaults: components["schemas"]["IJanusSessionOnlineDefaults"];
      access_type: components["schemas"]["EJanusSessionAccessType"];
      whitelist: components["schemas"]["IJanusSessionUser"][];
      blacklist: components["schemas"]["IJanusSessionUser"][];
      /** Max Janus session clients */
      max_clients: number;
      account: components["schemas"]["IAccount"];
      deleted_on: string;
    };
    _IBaseUUIDEntity: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
    };
    IJanusSessionUser: {
      id: string;
      session: components["schemas"]["IJanusSession"];
      sip_user: components["schemas"]["ISIPUser"];
      video: boolean;
      audio: boolean;
      chat: boolean;
      screencast: boolean;
      /** null if sip user is online */
      deleted_on: string;
    };
    IJanusConnection: {
      uuid: components["schemas"]["UUID"];
      janus_session: components["schemas"]["IJanusSession"];
      active: boolean;
    };
    IJanusConnectionsResponse: {
      success: boolean;
      payload: components["schemas"]["IJanusConnection"][];
      ttl?: number;
    };
    IJanusConnectionsNewParams: {
      /** Janus-Opensips connection uuid's */
      uuids: components["schemas"]["UUID"][];
      active?: boolean;
      /** JanusSession uuid */
      janus_session: components["schemas"]["UUID"];
    };
    IJanusConnectionsUpdateParams: {
      /** Janus-Opensips connection uuid's */
      uuids: components["schemas"]["UUID"][];
      active?: boolean;
    };
    IJanusConnectionResponse: {
      success: boolean;
      payload: components["schemas"]["IJanusConnection"];
      ttl?: number;
    };
    IJanusSessionResponse: {
      success: boolean;
      payload: components["schemas"]["IJanusSession"];
    };
    IJanusSessionNewParams: {
      /** A user-assigned name to help manage the conference room. */
      name: string;
      /** A user-assigned description to help manage the conference room. */
      description?: string;
      online_defaults?: components["schemas"]["IJanusSessionOnlineDefaults"];
      /** Room access type */
      access_type?: components["schemas"]["EJanusSessionAccessType"];
      /** Maximum sip clients in the room */
      max_clients?: number;
      /** Array of JanusSessionUser id's which is not allowed to join room */
      blacklist?: string[];
      /** Array of JanusSessionUser id's which is only allowed to join room (in case access_type = 'whitelist') */
      whitelist?: string[];
    };
    IJanusSessionsResponse: {
      success: boolean;
      payload: components["schemas"]["IJanusSession"][];
    };
    IJanusSessionUsersResponse: {
      success: boolean;
      payload: components["schemas"]["IJanusSessionUser"][];
    };
    IJanusSessionUpdateWhitelistParams: {
      /** Array of JanusSessionUser id's which is only allowed to join room (in case access_type = 'whitelist') */
      whitelist?: string[];
    };
    IJanusSessionUpdateBlacklistParams: {
      /** Array of JanusSessionUser id's which is not allowed to join room */
      blacklist?: string[];
    };
    IJanusSessionUpdateParams: {
      /** A user-assigned name to help manage the conference room. */
      name?: string;
      /** A user-assigned description to help manage the conference room. */
      description?: string;
      online_defaults?: components["schemas"]["IJanusSessionOnlineDefaults"];
      /** Room access type */
      access_type?: components["schemas"]["EJanusSessionAccessType"];
      /** Maximum sip clients in the room */
      max_clients?: number;
    };
    IJanusSessionUserResponse: {
      success: boolean;
      payload: components["schemas"]["IJanusSessionUser"];
    };
    IJanusSessionUserNewParams: {
      video?: boolean;
      audio?: boolean;
      chat?: boolean;
      screencast?: boolean;
      /** User unique id */
      id: string;
      /** SIPUser uuid */
      sip_user?: components["schemas"]["UUID"];
    };
    IJanusSessionUserUpdateParams: components["schemas"]["IJanusSessionOnlineDefaults"];
    IMessagingProfileResponse: {
      success: boolean;
      payload: components["schemas"]["IMessagingProfile"];
    };
    IMessagingProfileNewParams: {
      /** A user-assigned name to help manage the messaging profile. */
      name: string;
      /** Primary webhook callback url */
      callback_url?: string | null;
      /** Secondary webhook url (if primary can't be reached) */
      callback_url2?: string | null;
      number_pool_enable?: boolean;
      long_code_weight?: number;
      tollfree_weight?: number;
      skip_unhealthy_tns?: boolean;
      sticky_sender?: boolean;
    };
    IMessagingProfilesResponse: {
      success: boolean;
      payload: components["schemas"]["IMessagingProfile"][];
    };
    ITNLeasesResponse: {
      success: boolean;
      payload: components["schemas"]["ITNLease"][];
    };
    IMessagingProfileUpdateParams: {
      /** A user-assigned name to help manage the messaging profile. */
      name?: string;
      /** Primary webhook callback url */
      callback_url?: string | null;
      /** Secondary webhook url (if primary can't be reached) */
      callback_url2?: string | null;
      number_pool_enable?: boolean;
      long_code_weight?: number;
      tollfree_weight?: number;
      skip_unhealthy_tns?: boolean;
      sticky_sender?: boolean;
    };
    ITNOrderResponse: {
      success: boolean;
      payload: components["schemas"]["ITNOrder"];
    };
    ITNOrderPriceItem: {
      nrc: number;
      mrc: number;
      voice_nrc: number;
      voice_mrc: number;
      voice_incoming_per_min_cost: number;
      voice_outgoing_per_min_cost: number;
      fax_nrc: number;
      fax_mrc: number;
      fax_incoming_per_min_cost: number;
      fax_outgoing_per_min_cost: number;
      emergency_nrc: number;
      emergency_mrc: number;
      emergency_incoming_per_min_cost: number;
      emergency_outgoing_per_min_cost: number;
      sms_nrc: number;
      sms_mrc: number;
      sms_per_send_cost: number;
      sms_per_receive_cost: number;
      mms_nrc: number;
      mms_mrc: number;
      mms_per_send_cost: number;
      mms_per_receive_cost: number;
      /** Order item uniq id */
      id: string;
      /** Order item name */
      name: string;
      /** Order item description */
      description?: string;
    };
    ITNOrderPrice: {
      /** Order one time payment price */
      nrc: number;
      /** Order recurrent price */
      mrc: number;
      /** Order contents */
      items: components["schemas"]["ITNOrderPriceItem"][];
    };
    ITNOrderPriceResponse: {
      success: boolean;
      payload: components["schemas"]["ITNOrderPrice"];
    };
    ITNOrdersResponse: {
      success: boolean;
      payload: components["schemas"]["ITNOrder"][];
    };
    IOutboundVoiceProfileResponse: {
      success: boolean;
      payload: components["schemas"]["IOutboundVoiceProfile"];
    };
    IClass4TrunkSettingsNewParams: {
      media_type?: components["schemas"]["EClass4MediaType"];
    };
    IClass4TrunkSettingsUpdateParams: {
      media_type?: components["schemas"]["EClass4MediaType"];
    };
    IOutboundVoiceProfileNewParams: {
      /** A user-assigned name to help manage the voice profile. */
      name: string;
      is_active?: boolean;
      /** SIP Product ID */
      product: number;
      /** TNLease uuid */
      tn_lease?: components["schemas"]["UUID"] | null;
      class4_ingress_trunk_settings: components["schemas"]["IClass4TrunkSettingsNewParams"];
    };
    IOutboundVoiceProfilesResponse: {
      success: boolean;
      payload: components["schemas"]["IOutboundVoiceProfile"][];
    };
    IOutboundVoiceProfileUpdateParams: {
      /** A user-assigned name to help manage the outbound voice profile. */
      name?: string;
      is_active?: boolean;
      /** SIP Product ID */
      product?: number;
      /** TNLease uuid */
      tn_lease?: components["schemas"]["UUID"] | null;
      class4_ingress_trunk_settings?: components["schemas"]["IClass4TrunkSettingsUpdateParams"];
    };
    EPaymentState: "created" | "success" | "failed";
    EPaymentProvider: "paypal" | "stripe" | "unknown";
    IPayment: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      state: components["schemas"]["EPaymentState"];
      provider: components["schemas"]["EPaymentProvider"];
      reference_id?: string;
      user: components["schemas"]["IUser"];
      account: components["schemas"]["IAccount"];
      amount: number;
      meta?: { [key: string]: any };
    };
    IPaymentResponse: {
      success: boolean;
      payload: components["schemas"]["IPayment"];
    };
    IPaymentNewParams: {
      /** Payment Provider */
      provider: components["schemas"]["EPaymentProvider"];
      /** Payment amount */
      amount: number;
    };
    IPaymentsResponse: {
      success: boolean;
      payload: components["schemas"]["IPayment"][];
    };
    EProviderEventState: "created" | "skipped" | "success" | "failed";
    ESyniverseEventTopic:
      | "ABA-Messages"
      | "MSS-Messages"
      | "NIS-Events"
      | "SCG-Chat"
      | "SCG-Communication-Assistant"
      | "SCG-Contact"
      | "SCG-Keyword"
      | "SCG-Message"
      | "SCG-Sender-ID"
      | "SCG-Voice-Call";
    ISyniverseEventMOEvent: {
      message_id: string;
      application_id?: number;
      sender_id_alias?: string;
      sender_id_id?: string;
      fragments_count?: number;
      "company-id"?: number;
      to_address: string;
      has_attachment?: boolean;
      from_address?: string;
      anti_virus_scan_status?: { [key: string]: any };
      mo_price?: number;
      message_body: string;
    };
    ESyniverseEventMTEventState:
      | "CREATED"
      | "QUEUED"
      | "SENT"
      | "DELIVERED"
      | "READ"
      | "CONVERTED"
      | "FAILED"
      | "EXPIRED"
      | "SCHEDULED"
      | "TEST"
      | "PAUSED"
      | "DELETED";
    /**
     * Mobile Terminated messages delivered
     * to the user leveraging the SDC/SCG
     * Mobile API platform
     * (SMS/MMS/Other)
     */
    ISyniverseEventMTEvent: {
      message_id: string;
      application_id?: number;
      sender_id_alias?: string;
      sender_id_id?: string;
      fragments_count?: number;
      "company-id"?: number;
      to_address: string;
      has_attachment?: boolean;
      from_address?: string;
      anti_virus_scan_status?: { [key: string]: any };
      previous_state?: Partial<
        components["schemas"]["ESyniverseEventMTEventState"]
      > &
        Partial<string>;
      /** The status of the message to this recipient. */
      new_state: Partial<components["schemas"]["ESyniverseEventMTEventState"]> &
        Partial<string>;
      message_request_id?: string;
      reason_description?: string;
      reason_code?: string;
      external_message_request_id?: string;
      mt_price?: number;
    };
    ESyniverseEventType: "message_state_change" | "mo_message_received";
    ISyniverseEventMOPayload: {
      "fld-val-list"?: components["schemas"]["ISyniverseEventMOEvent"];
      "evt-tp"?: Partial<components["schemas"]["ESyniverseEventType"]> &
        Partial<string>;
      timestamp?: string;
    };
    ISyniverseEventMTPayload: {
      "fld-val-list"?: components["schemas"]["ISyniverseEventMTEvent"];
      "evt-tp"?: Partial<components["schemas"]["ESyniverseEventType"]> &
        Partial<string>;
      timestamp?: string;
    };
    ISyniverseEventParams: {
      topic?: components["schemas"]["ESyniverseEventTopic"];
      attempt?: number;
      event?: Partial<components["schemas"]["ISyniverseEventMOPayload"]> &
        Partial<components["schemas"]["ISyniverseEventMTPayload"]>;
      "event-id"?: string;
    };
    IInteliquentEventParams: {
      /** Cross reference for the message Id */
      referenceId: string;
      /** TN of the sender */
      from?: string;
      /** Array of multiple TNs to whom the message was sent */
      to?: string[];
      /** Text message included as part of the MMS call */
      text?: string;
      /** If this message is a delivery receipt, then the value is set to true. */
      deliveryReceipt?: boolean;
      /** Optional field with an array of media assets retrievable via URL */
      mediaUrls?: string[];
    };
    EQueue:
      | "billing"
      | "class4"
      | "callback"
      | "events"
      | "schedule"
      | "system"
      | "sms"
      | "email"
      | "provider"
      | "notifications"
      | "freeswitch";
    ESystemQueueActions: "dict_lerg_save" | "dict_gtts_reload";
    ESMSQueueActions:
      | "new_sms_syniverse"
      | "new_sms_inteliquent"
      | "new_smsi"
      | "sms_state_changed"
      | "sms_sent"
      | "sms_delivered"
      | "sms_send_fails"
      | "sms_delivery_fails";
    EEmailQueueActions: "email" | "invoice";
    EClass4QueueActions:
      | "did_client_create"
      | "did_prefix_create"
      | "did_prefix_delete"
      | "sca_trunk_egress_create"
      | "sca_trunk_egress_update"
      | "sca_trunk_egress_delete"
      | "sca_trunk_ingress_create"
      | "sca_trunk_ingress_update"
      | "sca_trunk_ingress_delete"
      | "sca_trunk_ingress_resource_ip_create"
      | "sca_trunk_egress_resource_ip_download"
      | "sc_trunk_ingress_create"
      | "sc_trunk_ingress_update"
      | "sc_trunk_ingress_delete"
      | "sc_trunk_ingress_resource_ip_create"
      | "sc_trunk_egress_create"
      | "sc_trunk_egress_update"
      | "sc_trunk_egress_delete"
      | "sc_trunk_egress_resource_ip_create"
      | "sc_trunk_egress_resource_ip_download"
      | "sc_trunk_egress_resource_ip_update"
      | "ovp_trunk_ingress_create"
      | "ovp_trunk_ingress_update"
      | "ovp_trunk_ingress_delete"
      | "ovp_trunk_ingress_resource_ip_create"
      | "sc_trunk_prefix_create"
      | "sca_trunk_prefix_create"
      | "ovp_trunk_prefix_create"
      | "product_item_create"
      | "product_item_update"
      | "product_item_delete"
      | "products_sync";
    EBillingQueueActions:
      | "payment_success"
      | "payment_update_paypal"
      | "payment_update_stripe"
      | "nrc"
      | "mrc"
      | "sms_nrc"
      | "sms_mrc"
      | "sms_per_send"
      | "sms_per_receive"
      | "mms_nrc"
      | "mms_mrc"
      | "mms_per_send"
      | "mms_per_receive"
      | "voice_nrc"
      | "voice_mrc"
      | "voice_charge"
      | "fax_nrc"
      | "fax_mrc"
      | "fax_per_send"
      | "fax_per_receive"
      | "emergency_nrc"
      | "emergency_mrc"
      | "emergency_per_send"
      | "emergency_per_receive"
      | "tts";
    ECallbackQueueActions:
      | "sms_sent"
      | "sms_delivered"
      | "sms_send_fails"
      | "sms_delivery_fails"
      | "smsi_received"
      | "sca_call_started"
      | "sca_call_finished";
    EEventsQueueActions:
      | "syniverse_mo_message_received"
      | "syniverse_message_state_change"
      | "inteliquent_message_received"
      | "freeswitch_channel_created"
      | "freeswitch_channel_destroyed"
      | "freeswitch_playback_start"
      | "freeswitch_playback_stop";
    EProviderQueueActions:
      | "tnorder_start"
      | "tnorder_stop"
      | "tn_buy_inteliquent"
      | "tf_buy_inteliquent"
      | "tn_release_inteliquent"
      | "tf_release_inteliquent"
      | "tn_bought"
      | "tn_register"
      | "tn_unregister"
      | "tf_sms_enable"
      | "tn_sms_enable"
      | "tf_sms_disable"
      | "tn_sms_disable"
      | "tf_voice_enable"
      | "tn_voice_enable"
      | "tf_voice_disable"
      | "tn_voice_disable";
    ENotificationsQueueActions:
      | "balance_changed"
      | "smsi_received"
      | "sms_sent"
      | "sms_delivered"
      | "sms_send_fails"
      | "sms_delivery_fails"
      | "tnorder_processed"
      | "tnleases_released"
      | "tnleases_releasing";
    EFreeswitchQueueActions:
      | "sip_control_app_call_started"
      | "sip_control_app_call_finished"
      | "call_flow_execute";
    TWorkerAction: Partial<components["schemas"]["ESystemQueueActions"]> &
      Partial<components["schemas"]["ESMSQueueActions"]> &
      Partial<components["schemas"]["EEmailQueueActions"]> &
      Partial<components["schemas"]["EClass4QueueActions"]> &
      Partial<components["schemas"]["EBillingQueueActions"]> &
      Partial<components["schemas"]["ECallbackQueueActions"]> &
      Partial<components["schemas"]["EScheduleQueueActions"]> &
      Partial<components["schemas"]["EEventsQueueActions"]> &
      Partial<components["schemas"]["EProviderQueueActions"]> &
      Partial<components["schemas"]["ENotificationsQueueActions"]> &
      Partial<components["schemas"]["EFreeswitchQueueActions"]>;
    IWorkerAction: {
      /**
       * Optional priority value. ranges from 1 (highest priority) to MAX_INT  (lowest priority).
       * Note that using priorities has a slight impact on performance, so do not use it if not required
       */
      priority?: number;
      /** Delay in seconds */
      delay?: number;
      /** The total number of attempts to try the job until it completes */
      attempts?: number;
      /**
       * A boolean which, if true, adds the job to the right
       * of the queue instead of the left (default false)
       */
      lifo?: boolean;
      /** The number of milliseconds after which the job should be fail with a timeout error */
      timeout?: number;
      /** custom jobId */
      jobId?: Partial<string> & Partial<number>;
      /**
       * A boolean which, if true, removes the job when it successfully completes.
       * When a number, it specifies the amount of jobs to keep.
       * Default behavior is to keep the job in the failed set.
       */
      removeOnComplete?: Partial<boolean> & Partial<number>;
      /**
       * A boolean which, if true, removes the job when it fails after all attempts.
       * When a number, it specifies the amount of jobs to keep.
       * Default behavior is to keep the job in the completed set.
       */
      removeOnFail?: Partial<boolean> & Partial<number>;
      /** Limits the amount of stack trace lines that will be recorded in the stacktrace. */
      stackTraceLimit?: number;
      /** Prevents JSON data from being parsed. */
      preventParsingData?: boolean;
      queue: components["schemas"]["EQueue"];
      action: components["schemas"]["TWorkerAction"];
      payload?: { [key: string]: any };
      chainActions?: components["schemas"]["IWorkerAction"][];
      chainOnComplete?: components["schemas"]["IWorkerAction"][];
      chainOnFail?: components["schemas"]["IWorkerAction"][];
      chainFinally?: components["schemas"]["IWorkerAction"][];
      chainHistory?: components["schemas"]["IWorkerChainHistory"][];
    };
    IWorkerResponse: {
      success: boolean;
      payload: { [key: string]: any };
      message: string;
      actions: components["schemas"]["IWorkerAction"][];
      chainActions?: components["schemas"]["IWorkerAction"][];
      chainOnComplete?: components["schemas"]["IWorkerAction"][];
      chainOnFail?: components["schemas"]["IWorkerAction"][];
      chainFinally?: components["schemas"]["IWorkerAction"][];
      chainHistory?: components["schemas"]["IWorkerChainHistory"][];
    };
    IWorkerChainHistory: {
      action: components["schemas"]["IWorkerAction"];
      response: components["schemas"]["IWorkerResponse"];
    };
    IProviderEventWorkerResponse: components["schemas"]["IWorkerResponse"];
    IProviderEvent: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      provider: components["schemas"]["IProvider"];
      state: components["schemas"]["EProviderEventState"];
      reference_event_id?: string;
      reference_object_id?: string;
      payload: Partial<components["schemas"]["ISyniverseEventParams"]> &
        Partial<components["schemas"]["IInteliquentEventParams"]>;
      process_result?: components["schemas"]["IProviderEventWorkerResponse"];
    };
    IProviderEventResponse: {
      success: boolean;
      payload: components["schemas"]["IProviderEvent"];
    };
    ISettingsResponse: {
      success: boolean;
      payload: {
        payments: {
          stripe: {
            public_key: string;
          };
          paypal: {
            client_id: string;
            mode: "live" | "sandbox";
          };
        };
        auth: {
          apple: {
            client_id: string;
          };
          facebook: {
            app_id: number;
            api_version: string;
          };
          google: {
            client_id: string;
            scope: string;
          };
        };
      };
    };
    ITNLeasesAssignParams: {
      /** List of TNLease uuid's to be assigned */
      add?: components["schemas"]["UUID"][];
      /** List of TNLease uuid's to be removed */
      remove?: components["schemas"]["UUID"][];
    };
    ISIPConnectionResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPConnection"];
    };
    ISIPConnectionNewParams: {
      /** A user-assigned name to help manage the application. */
      name: string;
      /** Remote sip service ip */
      ip?: string;
      /** Remote sip service port */
      port: number;
      /** Remote hostname */
      hostname?: string;
      is_active?: boolean;
      /** SIP Product ID */
      product: number;
      class4_ingress_trunk_settings: components["schemas"]["IClass4TrunkSettingsNewParams"];
      class4_egress_trunk_settings: components["schemas"]["IClass4TrunkSettingsNewParams"];
    };
    ISIPConnectionsResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPConnection"][];
    };
    ISIPConnectionUpdateParams: {
      /** A user-assigned name to help manage the application. */
      name?: string;
      /** Remote sip service ip */
      ip?: string;
      /** Remote sip service port */
      port?: number;
      /** Remote hostname */
      hostname?: string;
      is_active?: boolean;
      /** SIP Product ID */
      product?: number;
      class4_ingress_trunk_settings?: components["schemas"]["IClass4TrunkSettingsUpdateParams"];
      class4_egress_trunk_settings?: components["schemas"]["IClass4TrunkSettingsUpdateParams"];
    };
    ISIPControlAppCallFlowResponse: {
      success: boolean;
      payload: string;
      url: string;
    };
    ESearchMode: "AND" | "OR";
    ESearchOrder: "ASC" | "DESC";
    IILogCallFlowSearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** Logs list */
      data: components["schemas"]["ILogCallFlow"][];
    };
    ISearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      data: { [key: string]: any }[];
    };
    ILogCallFlowSearchResponse: {
      success: boolean;
      payload: components["schemas"]["IILogCallFlowSearchPayload"];
    };
    ILogCallFlowSearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       *
       * Accepted values:
       * * name
       * * from
       * * tn
       * * channel_uuid
       * * created_on
       * * modified_on
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      name?: components["schemas"]["EXmlTransformerElementName"];
      success?: boolean;
      /** Call source address */
      from?: string;
      /** Call destination address */
      tn?: number;
      /** SIPControlAppCall uuid */
      call?: components["schemas"]["UUID"];
    };
    EFreeswitchCallState:
      | "ACTIVE"
      | "RINGING"
      | "DOWN"
      | "HANGUP"
      | "DIALING"
      | "EARLY"
      | "RING_WAIT"
      | "HELD"
      | "UNHELD";
    EFreeswitchChannelState:
      | "CS_NEW"
      | "CS_INIT"
      | "CS_ROUTING"
      | "CS_SOFT_EXECUTE"
      | "CS_EXECUTE"
      | "CS_EXCHANGE_MEDIA"
      | "CS_PARK"
      | "CS_CONSUME_MEDIA"
      | "CS_HIBERNATE"
      | "CS_REPORTING"
      | "CS_NONE"
      | "CS_RESET"
      | "CS_HANGUP"
      | "CS_DESTROY";
    IFreeswitchChannel: {
      uuid: string;
      callstate: components["schemas"]["EFreeswitchCallState"];
      state: components["schemas"]["EFreeswitchChannelState"];
      created: string;
      created_epoch: number;
      cid_name: string;
      cid_num: string;
      name: string;
      direction: string;
      ip_addr?: string;
      dest: string;
      application?: string;
      application_data?: string;
      dialplan?: string;
      context?: string;
      read_codec?: string;
      read_rate?: string;
      read_bit_rate?: string;
      write_codec?: string;
      write_rate?: string;
      write_bit_rate?: string;
      secure?: string;
      hostname?: string;
      presence_id?: string;
      presence_data?: string;
      callee_name?: string;
      callee_num?: string;
      callee_direction?: string;
      call_uuid?: string;
      sent_callee_name?: string;
      sent_callee_num?: string;
    };
    ISIPControlAppCall: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      tn: components["schemas"]["ITN"];
      from: string;
      to: string;
      meta?: components["schemas"]["IFreeswitchChannel"];
      state?: components["schemas"]["ECallState"];
      source: components["schemas"]["ECallSource"];
      logs?: components["schemas"]["ILogCallFlow"][];
      account: components["schemas"]["IAccount"];
      sip_control_app: components["schemas"]["ISIPControlApp"];
    };
    ISIPControlAppCallsResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPControlAppCall"][];
    };
    ISIPControlAppCallResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPControlAppCall"];
    };
    IISIPControlAppCallSearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** SIPControlAppCall List */
      data: components["schemas"]["ISIPControlAppCall"][];
    };
    ISIPControlAppCallSearchResponse: {
      success: boolean;
      payload: components["schemas"]["IISIPControlAppCallSearchPayload"];
    };
    ISIPControlAppCallSearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       *
       * Accepted values:
       * * tn
       * * to
       * * from
       * * state
       * * created_on
       * * modified_on
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      /** Mask supported */
      tn?: string;
      /** Mask supported */
      from?: string;
      /** Mask supported */
      to?: string;
      state?: components["schemas"]["ECallState"];
      sip_control_app?: components["schemas"]["UUID"];
    };
    ISIPControlAppResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPControlApp"];
    };
    ISIPControlAppNewParams: {
      /** A user-assigned name to help manage the application. */
      name: string;
      is_active?: boolean;
      /** SIP Product ID */
      product: number;
      class4_egress_trunk_settings: components["schemas"]["IClass4TrunkSettingsNewParams"];
      class4_ingress_trunk_settings: components["schemas"]["IClass4TrunkSettingsNewParams"];
      /**
       * Webhooks for this application will be sent to this URL. Must include a scheme such as 'https'.
       *
       * `state`, `from` and `to` will be sent as query params
       */
      webhook_url?: string;
      /**
       * Webhook request type
       *
       * in case of POST method selected, full ISIPControlAppCall entity will be sent as body
       */
      webhook_method?: components["schemas"]["ESIPControlAppMethod"];
      /**
       * If null, then there is no timeout, then opentact will not activately hagup the cause.
       *
       * timeout in ms, it resets on redirect. 0 to disable (OS limit applies)
       */
      webhook_request_timeout?: number;
      /**
       * Webhooks for this application will be sent to this URL. Must include a scheme such as 'https'.
       *
       * `from` and `to` will be sent as query params
       */
      call_flow_url?: string;
      /**
       * If null, then there is no timeout, then opentact will not activately hagup the cause.
       *
       * timeout in ms, it resets on redirect. 0 to disable (OS limit applies)
       */
      call_flow_request_timeout?: number;
      /**
       * CallFlow request type
       *
       * in case of POST method selected, full ISIPControlAppCall entity will be sent as body
       */
      call_flow_method?: components["schemas"]["ESIPControlAppMethod"];
    };
    ISIPControlAppsResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPControlApp"][];
    };
    ISIPControlAppUpdateParams: {
      /** A user-assigned name to help manage the application. */
      name?: string;
      is_active?: boolean;
      /** SIP Product ID */
      product?: number;
      class4_egress_trunk_settings?: components["schemas"]["IClass4TrunkSettingsUpdateParams"];
      class4_ingress_trunk_settings?: components["schemas"]["IClass4TrunkSettingsUpdateParams"];
      /**
       * Webhooks for this application will be sent to this URL. Must include a scheme such as 'https'.
       *
       * `state`, `from` and `to` will be sent as query params
       */
      webhook_url?: string;
      /**
       * Webhook request type
       *
       * in case of POST method selected, full ISIPControlAppCall entity will be sent as body
       */
      webhook_method?: components["schemas"]["ESIPControlAppMethod"];
      /**
       * If null, then there is no timeout, then opentact will not activately hagup the cause.
       *
       * timeout in ms, it resets on redirect. 0 to disable (OS limit applies)
       */
      webhook_request_timeout?: number;
      /**
       * Webhooks for this application will be sent to this URL. Must include a scheme such as 'https'.
       *
       * `from` and `to` will be sent as query params
       */
      call_flow_url?: string;
      /**
       * If null, then there is no timeout, then opentact will not activately hagup the cause.
       *
       * timeout in ms, it resets on redirect. 0 to disable (OS limit applies)
       */
      call_flow_request_timeout?: number;
      /**
       * CallFlow request type
       *
       * in case of POST method selected, full ISIPControlAppCall entity will be sent as body
       */
      call_flow_method?: components["schemas"]["ESIPControlAppMethod"];
    };
    ISIPDomainResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPDomain"];
    };
    ISIPDomainNewParams: {
      /** SIPConnection uuid */
      sip_connection?: components["schemas"]["UUID"] | null;
      /** SIPControlApp uuid */
      sip_control_app?: components["schemas"]["UUID"] | null;
      /** Outbound Voice Profile uuid */
      outbound_voice_profile?: components["schemas"]["UUID"] | null;
      /** SIP domain name */
      domain: string;
    };
    ISIPDomainsResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPDomain"][];
    };
    ISIPDomainUpdateParams: {
      /** SIPConnection uuid */
      sip_connection?: components["schemas"]["UUID"] | null;
      /** SIPControlApp uuid */
      sip_control_app?: components["schemas"]["UUID"] | null;
      /** Outbound Voice Profile uuid */
      outbound_voice_profile?: components["schemas"]["UUID"] | null;
    };
    ISIPSwitchResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPSwitch"];
    };
    ISIPSwitchNewParams: {
      name: string;
      description?: string;
      remote_ip: string;
      remote_domain: string;
      is_active?: boolean;
    };
    ISIPSwitchesResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPSwitch"][];
    };
    ISIPSwitchUpdateParams: {
      name?: string;
      description?: string;
      remote_ip?: string;
      remote_domain?: string;
      is_active?: boolean;
    };
    ISIPUserResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPUser"];
    };
    ISIPUserNewParams: {
      login: string;
      password: string;
      first_name?: string;
      last_name?: string;
      email?: string;
      phone_number?: string;
      avatar?: string;
      /** Accept sip calls only from a same domain */
      same_domain_calls_only?: boolean;
      dob?: string;
      gender?: components["schemas"]["EGender"];
    };
    ISIPUsersResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPUser"][];
    };
    ISIPUserUpdateParams: {
      login?: string;
      password?: string;
      first_name?: string;
      last_name?: string;
      email?: string;
      phone_number?: string;
      avatar?: string;
      /** Accept sip calls only from a same domain */
      same_domain_calls_only?: boolean;
      dob?: string;
      gender?: components["schemas"]["EGender"];
    };
    ISIPUserInviteResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPUserInvite"];
    };
    ISIPUserInviteNewParams: {
      name: string;
      expired_on: string;
    };
    ISIPUserInvitesResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPUserInvite"][];
    };
    ISIPUserInviteUpdateParams: {
      name?: string;
      expired_on?: string;
    };
    ISIPProductsResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPProduct"][];
    };
    ISIPUserByInviteNewParams: {
      login: string;
      password: string;
      first_name?: string;
      last_name?: string;
      email?: string;
      phone_number?: string;
      avatar?: string;
      /** Accept sip calls only from a same domain */
      same_domain_calls_only?: boolean;
      dob?: string;
      gender?: components["schemas"]["EGender"];
    };
    IUserResetPasswordParams: {
      token: string;
      password: string;
    };
    ISIPUserGroupsResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPUserGroup"][];
    };
    ISIPUserGroupResponse: {
      success: boolean;
      payload: components["schemas"]["ISIPUserGroup"];
    };
    ISIPUserGroupNewParams: {
      name: string;
      /** Array of sip_user_uuid's */
      users?: components["schemas"]["UUID"][];
    };
    ISIPUserGroupUpdateParams: {
      name?: string;
      /** Array of sip_user_uuid's */
      users?: components["schemas"]["UUID"][];
    };
    ISIPUserGroupUsersUpdateParams: {
      /** SIPUser uuid list */
      users: components["schemas"]["UUID"][];
    };
    ESMSState: "created" | "sending" | "sent" | "failed";
    ISMS: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      tn: components["schemas"]["ITN"];
      to: string;
      thread: string;
      message: string;
      reference_id?: string;
      state: components["schemas"]["ESMSState"];
      delivered: boolean;
      automated: boolean;
      custom_callback_url?: string;
      account: components["schemas"]["IAccount"];
      created_by: components["schemas"]["IUser"];
    };
    ISMSResponse: {
      success: boolean;
      payload: components["schemas"]["ISMS"];
    };
    ISMSNewParams: {
      to: Partial<string> & Partial<number>;
      tn: number;
      message: string;
      /** URL override for messaging profile callback url's */
      custom_callback_url?: string;
    };
    ESMSIState: "created" | "success" | "failed";
    ISMSI: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      tn: components["schemas"]["ITN"];
      tnlease: components["schemas"]["ITNLease"];
      to: string;
      from: string;
      thread: string;
      message: string;
      provider_event: components["schemas"]["IProviderEvent"];
      state: components["schemas"]["ESMSIState"];
      delivered: boolean;
      readed: boolean;
      account: components["schemas"]["IAccount"];
    };
    ISMSIResponse: {
      success: boolean;
      payload: components["schemas"]["ISMSI"];
    };
    IISMSSearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** sms list */
      data: components["schemas"]["ISMS"][];
    };
    IISMSSearchResponse: {
      success: boolean;
      payload: components["schemas"]["IISMSSearchPayload"];
    };
    ISMSSearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       * Accepted values:
       * * tn
       * * to
       * * message
       * * state
       * * created_on
       * * modified_on
       * * reference_id
       * * delivered
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      /** Mask supported */
      message?: string;
      tn?: number;
      /** Mask supported */
      to?: string;
      delivered?: boolean;
      state?: components["schemas"]["ESMSState"];
      reference_id?: string;
    };
    IISMSISearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** sms list */
      data: components["schemas"]["ISMSI"][];
    };
    IISMSISearchResponse: {
      success: boolean;
      payload: components["schemas"]["IISMSISearchPayload"];
    };
    ISMSISearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       * Accepted values:
       * * tn
       * * to
       * * from
       * * message
       * * state
       * * created_on
       * * modified_on
       * * delivered
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      /** Mask supported */
      message?: string;
      tn?: number;
      /** Mask supported */
      to?: string;
      /** Mask supported */
      from?: string;
      delivered?: boolean;
      readed?: boolean;
      state?: components["schemas"]["ESMSIState"];
    };
    SMSISMSType: "sms" | "smsi";
    SMSISMS: {
      uuid: components["schemas"]["UUID"];
      thread: string;
      created_on: string;
      modified_on: string;
      message: string;
      from: string;
      to: string;
      state: Partial<components["schemas"]["ESMSState"]> &
        Partial<components["schemas"]["ESMSIState"]>;
      type: components["schemas"]["SMSISMSType"];
      account_uuid?: string;
      delivered?: boolean;
      readed?: boolean;
      automated?: boolean;
    };
    ISMSISMSSearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** sms list */
      data: components["schemas"]["SMSISMS"][];
    };
    ISMSISMSSearchResponse: {
      success: boolean;
      payload: components["schemas"]["ISMSISMSSearchPayload"];
    };
    ISMSISMSSearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       * Accepted values:
       * * from
       * * to
       * * message
       * * state
       * * delivered
       * * created_on - by default: **DESC**
       * * modified_on
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      /** Mask is supported */
      from?: string;
      /** Mask is supported */
      to?: string;
      thread?: string;
      /** Mask is supported */
      message?: string;
      delivered?: boolean;
      readed?: boolean;
      state?: components["schemas"]["ESMSState"] &
        components["schemas"]["ESMSIState"];
    };
    IITNLeaseSearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** TNLease list */
      data: components["schemas"]["ITNLease"][];
    };
    ITNLeaseSearchResponse: {
      success: boolean;
      payload: components["schemas"]["IITNLeaseSearchPayload"];
    };
    ITNLeaseSearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       *
       * Accepted values:
       * * tn
       * * created_on
       * * modified_on
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      /** Mask supported */
      tn?: string;
      autorenew?: boolean;
      sip_connection?: components["schemas"]["UUID"];
      sip_control_app?: components["schemas"]["UUID"];
    };
    ITNLeaseResponse: {
      success: boolean;
      payload: components["schemas"]["ITNLease"];
    };
    ITNLeaseUpdateParams: {
      /** Voice feature */
      voice?: boolean;
      /** Fax feature */
      fax?: boolean;
      /** Sms feature */
      sms?: boolean;
      /** Mms feature */
      mms?: boolean;
      /** Emergency feature */
      emergency?: boolean;
      /** Autorenew lease */
      autorenew?: boolean;
      /** Messaging profile uuid */
      messaging_profile?: components["schemas"]["UUID"];
      /** SIP Connection uuid */
      sip_connection?: components["schemas"]["UUID"] | null;
      /** SIP Control App uuid */
      sip_control_app?: components["schemas"]["UUID"] | null;
    };
    ITNProfilesResponse: {
      success: boolean;
      payload: components["schemas"]["ITNProfile"][];
    };
    ITNSpecialPrice: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      name?: string;
      description?: string;
      is_active: boolean;
      priority?: components["schemas"]["EPriority"];
      tn_provider?: components["schemas"]["IProvider"];
      /**
       * Toll free profile
       * Make sure related tn_provider is support for toll free numbers
       */
      toll_free?: boolean;
      /** tn search RegExp validator */
      tn_search_validator?: string;
      /** tn search placeholder */
      tn_search_placeholder?: string;
      /** tn search placeholder */
      tn_search_tooltip?: string;
      /** Class4 params: class4 resource_prefix.route_strategy_id */
      class4_resource_prefix_route_strategy_id: number;
      /** Class4 params: class4 resource_prefix.vendor.resource_id */
      class4_resource_prefix_vendor_resource_id: number;
      /** Class4 params: class4 resource_prefix.rate_table_id */
      class4_resource_prefix_rate_table_id: number;
      /** is number must be registered using Netnumber? */
      register_provider?: components["schemas"]["IProvider"];
      /** Non recurring cost */
      nrc: number;
      /** Monthly recurring cost */
      mrc: number;
      sms_provider?: components["schemas"]["IProvider"];
      /** Non recurring cost */
      sms_nrc: number;
      /** Monthly recurring cost */
      sms_mrc: number;
      sms_per_send_cost: number;
      sms_per_receive_cost: number;
      /** Non recurring cost */
      mms_nrc: number;
      /** Monthly recurring cost */
      mms_mrc: number;
      mms_per_send_cost: number;
      mms_per_receive_cost: number;
      voice_provider?: components["schemas"]["IProvider"];
      /** Non recurring cost */
      voice_nrc: number;
      /** Monthly recurring cost */
      voice_mrc: number;
      voice_incoming_per_min_cost: number;
      voice_outgoing_per_min_cost: number;
      /** Non recurring cost */
      fax_nrc: number;
      /** Monthly recurring cost */
      fax_mrc: number;
      fax_incoming_per_min_cost: number;
      fax_outgoing_per_min_cost: number;
      /** Non recurring cost */
      emergency_nrc: number;
      /** Monthly recurring cost */
      emergency_mrc: number;
      emergency_incoming_per_min_cost: number;
      emergency_outgoing_per_min_cost: number;
      country: components["schemas"]["IDICTCountry"];
      account?: components["schemas"]["IAccount"];
      expired_on: string;
    };
    ITNSpecialPricesResponse: {
      success: boolean;
      payload: components["schemas"]["ITNSpecialPrice"][];
    };
    ITNProfileResponse: {
      success: boolean;
      payload: components["schemas"]["ITNProfile"];
    };
    ITNSearch: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      data: components["schemas"]["ITN"][];
    };
    ITNSearchResponse: {
      success: boolean;
      payload: components["schemas"]["ITNSearch"];
    };
    ITNSearchParams: {
      /**
       * Ten digit telephone number; end * and % as wildcards. () implies match everything and % implies match that
       * specific digit position. For Example: *233 will match all tns that have 233 in them such as 2345672334
       * as well as 2331231234. Another example would be 233%55 would match 2342337556 as well as 7892334559.
       */
      pattern?: string;
      /** Rate center abbreviation (e.g. WSHNGTNZN1) */
      rateCenter?: string;
      /** Location Full Name filter for telephone numbers. */
      city?: string;
      /** Two-letter state or province abbreviation (e.g. IL, CA) */
      province?: string;
      /** Zip code filter for telephone numbers. */
      postalCode?: string;
      /**
       * If true, it will do searching based on alphabates as well. If its not sent or false,
       * it will do numeric & X based search.
       */
      abcSearch?: boolean;
      /** TN Profile name */
      profile?: string;
    };
    ETransactionReferenceType:
      | "payment"
      | "tnlease_mrc"
      | "tnlease_nrc"
      | "sms_incoming"
      | "sms_outgoing"
      | "sms_nrc"
      | "sms_mrc"
      | "mms_incoming"
      | "mms_outgoing"
      | "mms_nrc"
      | "mms_mrc"
      | "voice_incoming"
      | "voice_outgoing"
      | "voice_nrc"
      | "voice_mrc"
      | "fax_incoming"
      | "fax_outgoing"
      | "fax_nrc"
      | "fax_mrc"
      | "emergency_incoming"
      | "emergency_outgoing"
      | "emergency_nrc"
      | "emergency_mrc"
      | "tts";
    ITransaction: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      account: components["schemas"]["IAccount"];
      amount: number;
      account_balance_after: number;
      ref_type: components["schemas"]["ETransactionReferenceType"];
      ref_uuid?: string;
      description?: string;
    };
    IITransactionSearchPayload: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /** Order items by field's */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      /** total items founded */
      total: number;
      /** sms list */
      data: components["schemas"]["ITransaction"][];
    };
    IITransactionSearchResponse: {
      success: boolean;
      payload: components["schemas"]["IITransactionSearchPayload"];
    };
    ITransactionSearchParams: {
      /** how many items to take */
      take?: number;
      /** how many items to skip */
      skip?: number;
      mode?: components["schemas"]["ESearchMode"];
      /**
       * Order items by field's
       * Accepted values:
       * * account_balance_before
       * * account_balance_after
       * * amount
       * * ref_type
       * * created_on
       * * modified_on
       */
      order?: { [key: string]: components["schemas"]["ESearchOrder"] };
      created_on_from?: string;
      created_on_to?: string;
      modified_on_from?: string;
      modified_on_to?: string;
      account_balance_before?: number;
      account_balance_after?: number;
      amount?: number;
      ref_type?: components["schemas"]["ETransactionReferenceType"];
      ref_uuid?: components["schemas"]["UUID"];
      description?: string;
    };
    ITransactionWithRefObject: {
      /** Created on datetime */
      created_on?: string;
      /** Last modified on datetime */
      modified_on?: string;
      uuid: components["schemas"]["UUID"];
      account: components["schemas"]["IAccount"];
      amount: number;
      account_balance_after: number;
      ref_type: components["schemas"]["ETransactionReferenceType"];
      ref_uuid?: string;
      description?: string;
      ref_object: Partial<components["schemas"]["IPayment"]> &
        Partial<components["schemas"]["ITNOrder"]> &
        Partial<components["schemas"]["ITNLease"]> &
        Partial<components["schemas"]["ISMS"]> &
        Partial<components["schemas"]["ISMSI"]>;
    };
    ITransactionResponse: {
      success: boolean;
      payload: components["schemas"]["ITransactionWithRefObject"];
    };
    ITransactionInvoiceReportRow: {
      ref_type: components["schemas"]["ETransactionReferenceType"];
      amount: number;
    };
    ITransactionInvoiceReport: {
      from: string;
      to: string;
      report: components["schemas"]["ITransactionInvoiceReportRow"][];
    };
    ITransactionInvoiceReportResponse: {
      success: boolean;
      payload: components["schemas"]["ITransactionInvoiceReport"];
    };
    ITransactionDashboardReportRow: {
      date: string;
      count: number;
      sum: number;
    };
    ITransactionDashboardReport: {
      from: string;
      to: string;
      ref_type: components["schemas"]["ETransactionReferenceType"];
      report: components["schemas"]["ITransactionDashboardReportRow"][];
    };
    ITransactionDashboardReportResponse: {
      success: boolean;
      payload: components["schemas"]["ITransactionDashboardReport"];
    };
    IUserCartEntry: {
      uuid: components["schemas"]["UUID"];
      payload: { [key: string]: any };
    };
    IUserCartEntryResponse: {
      success: boolean;
      payload: components["schemas"]["IUserCartEntry"];
    };
    IUserCartEntryNewParams: {
      payload: { [key: string]: any };
      /** Time to live (in seconds) */
      ttl?: number;
    };
    IUserCartEntriesResponse: {
      success: boolean;
      payload: components["schemas"]["IUserCartEntry"][];
    };
    IUserUpdateParams: {
      email?: string;
      password?: string;
      phone_number?: string;
      first_name?: string;
      last_name?: string;
      gender?: components["schemas"]["EGender"];
      dob?: string;
      avatar?: string;
      role?: components["schemas"]["EUserRole"];
    };
  };
  responses: {};
  parameters: {};
  requestBodies: {};
  headers: {};
}

export interface operations {
  /** Get account office hours list */
  GetAccountOfficeHoursList: {
    parameters: {
      query: {
        dow?: components["schemas"]["EDayOfWeek"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountOfficeHourssResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Account office hours entry */
  CreateAccountOfficeHours: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountOfficeHoursResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IAccountOfficeHoursResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IAccountOfficeHoursNewParams"];
      };
    };
  };
  /** Get Account office hours extended info */
  GetAccountOfficeHours: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountOfficeHoursResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Account office hours not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete Account Office hours */
  RemoveAccountOfficeHoursByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountOfficeHoursResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Account Office hours not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Update Account Office hours */
  UpdateAccountOfficeHours: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountOfficeHoursResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Account office hours not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IAccountOfficeHoursUpdateParams"];
      };
    };
  };
  /** Get current user account */
  GetAccount: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Account not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get account users */
  GetUsersByAccount: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUsersResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Add user to account */
  AddUserToAccount: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** User already exists */
      409: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserNewParams"];
      };
    };
  };
  /** Get user account */
  GetAccountByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAccountResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Account not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Reactivate user account */
  ReactivateUserAccountByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUsersResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Deactivate user account */
  DeactivateUserAccountByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUsersResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Address */
  CreateAddress: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAddressResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IAddressResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Country not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IAddressNewParams"];
      };
    };
  };
  /** Get Address list related to account */
  GetAddressListByAccount: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAddressesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Address list related to user */
  GetAddressListByUser: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAddressesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Address extended info */
  GetAddress: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAddressResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Address not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete Address */
  RemoveAddressByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAddressResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Address not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Update Address */
  UpdateAddress: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IAddressResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Address / Country not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IAddressUpdateParams"];
      };
    };
  };
  /** Run Scheduler action */
  ScheduleAction: {
    parameters: {
      path: {
        /** Schedule action name */
        action: components["schemas"]["EScheduleQueueActions"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
    };
  };
  /** Run Class4 products sync job */
  Class4SyncProducts: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
    };
  };
  /** Run class4: create did prefixes */
  Class4DIDPrefixCreate: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IAdminClass4DIDPrefixCreateParams"];
      };
    };
  };
  /** Manual tnlease creation */
  TnleaseCreate: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IAdminTNLeaseCreateParams"];
      };
    };
  };
  /** Run Invoice send job */
  SystemDICTGTTSReload: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
    };
  };
  /** Auth user */
  Auth: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ILoginResponse"];
        };
      };
      /** Wrong credentials */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** list all timezones */
  ListDictTimeZone: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IDICTTimeZonesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** list all available TTS Voices */
  ListDictGTTSVoices: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IDICTGTTSVoicesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** list all countries */
  ListDictCountry: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IDICTCountriesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Upload LERG csv file */
  UploadDictLERG: {
    parameters: {
      formData: {
        file: unknown;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IDICTLERGUploadResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Bearer token */
  CreateToken: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITokenResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ITokenResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITokenNewParams"];
      };
    };
  };
  /** Get token list */
  GetTokenList: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITokensResponse"];
        };
      };
    };
  };
  /** Modify token */
  ModifyToken: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITokenResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITokenUpdateParams"];
      };
    };
  };
  /** Delete all tokens */
  RemoveAll: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete token */
  RemoveByTokenString: {
    parameters: {
      path: {
        /** - token to remove */
        token: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITokenResponse"];
        };
      };
      /** Token not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Janus Connections */
  CreateJanusConnections: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusConnectionsResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IJanusConnectionsResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusConnectionsNewParams"];
      };
    };
  };
  /** Delete all Janus Connections */
  DeleteALLJanusConnections: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Modify Janus Connections */
  ModifyJanusConnection: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusConnectionsResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IJanusConnectionsResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusConnectionsUpdateParams"];
      };
    };
  };
  /** Get next free Janus Connection */
  GetNextJanusConnectionByJanusSessionUUID: {
    parameters: {
      path: {
        /** Janus Session uuid */
        uuid: components["schemas"]["UUID"];
        /** JanusSessionUser id */
        id: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusConnectionResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get all connections list */
  GetJanusConnections: {
    parameters: {
      path: {
        /** Janus Session uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusConnectionsResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete all Janus Connections related to Janus Session */
  DeleteJanusConnectionsByJanusSessionUUID: {
    parameters: {
      path: {
        /** Janus Session uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Janus Session */
  CreateJanusSession: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusSessionNewParams"];
      };
    };
  };
  /** Get Full Janus sessions list */
  GetJanusSessionsList: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Janus sessions list */
  GetJanusSessionsListByOwner: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Janus Sessions related to user account */
  GetJanusSessionsListByAccount: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Janus Session users related to JanusSession */
  GetJanusSessionsRosterList: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionUsersResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Janus Session extended info */
  GetJanusSession: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Janus session not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete Janus session */
  RemoveJanusSessionByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Janus session not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Update Janus session */
  UpdateJanusSession: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Janus session not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusSessionUpdateParams"];
      };
    };
  };
  /** Add SIP users to whitelist */
  PutSIPUsersToJanusSessionWhitelist: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Janus session not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusSessionUpdateWhitelistParams"];
      };
    };
  };
  /** Add SIP users to blacklist */
  PutSIPUsersToJanusSessionBlacklist: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Janus session not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusSessionUpdateBlacklistParams"];
      };
    };
  };
  /** Remove JanusSessionUser from blacklist */
  RemoveSIPUserFromJanusSessionBlacklist: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
        id: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove JanusSessionUser from whitelist */
  RemoveSIPUserFromJanusSessionWhitelist: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
        id: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Janus session / SIP User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create JanusSessionUser */
  CreateJanusSessionUser: {
    parameters: {
      path: {
        /** JanusSession uuid */
        session_uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionUserResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusSessionUserNewParams"];
      };
    };
  };
  /** Remove SIP user */
  RemoveJanusSessionUser: {
    parameters: {
      path: {
        session_uuid: components["schemas"]["UUID"];
        id: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionUserResponse"];
        };
      };
      /** Removed */
      202: {
        content: {
          "application/json": components["schemas"]["IJanusSessionUserResponse"];
        };
      };
      /** Not in online list already */
      208: {
        content: {
          "application/json": components["schemas"]["IJanusSessionUserResponse"];
        };
      };
      /** Janus session / SIP User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Modify JanusSessionUser */
  ModifyJanusSessionUser: {
    parameters: {
      path: {
        session_uuid: components["schemas"]["UUID"];
        id: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IJanusSessionUserResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IJanusSessionUserUpdateParams"];
      };
    };
  };
  /** Get Messaging profile list */
  ListMessagingProfiles: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IMessagingProfilesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Messaging profile */
  CreateMessagingProfile: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IMessagingProfileResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IMessagingProfileResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IMessagingProfileNewParams"];
      };
    };
  };
  /** Get extended Messaging profile info */
  GetMessagingProfileByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IMessagingProfileResponse"];
        };
      };
      /** Messaging profile not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove Messaging profile */
  RemoveMessagingProfileByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IMessagingProfileResponse"];
        };
      };
      /** Messaging profile not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change Messaging profile */
  ModifyMessagingProfile: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IMessagingProfileResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IMessagingProfileUpdateParams"];
      };
    };
  };
  /** Get leases list linked to Messaging profile */
  GetMessagingProfileLeasesByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeasesResponse"];
        };
      };
      /** Messaging profile not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new tn order */
  CreateTNOrder: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNOrderResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ITNOrderResponse"];
        };
      };
      /** Not enough account balance */
      402: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNOrderNewParams"];
      };
    };
  };
  /** Get Order price */
  GetOrderPrice: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNOrderPriceResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNOrderNewParams"];
      };
    };
  };
  /** Get order list */
  ListOrders: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNOrdersResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get extended order info */
  GetOrderByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNOrderResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Order not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Outbound voice profile list */
  ListOutboundVoiceProfiles: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IOutboundVoiceProfilesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new Outbound voice profile */
  CreateOutboundVoiceProfile: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IOutboundVoiceProfileResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IOutboundVoiceProfileResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IOutboundVoiceProfileNewParams"];
      };
    };
  };
  /** Get extended Outbound voice profile info */
  GetOutboundVoiceProfileByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IOutboundVoiceProfileResponse"];
        };
      };
      /** Outbound voice profile not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove Outbound voice profile */
  RemoveOutboundVoiceProfileByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IOutboundVoiceProfileResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change Outbound voice profile */
  ModifyOutboundVoiceProfile: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IOutboundVoiceProfileResponse"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IOutboundVoiceProfileUpdateParams"];
      };
    };
  };
  /** Get user payments list */
  ListPayments: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IPaymentsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create payment */
  CreatePayment: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IPaymentResponse"];
        };
      };
      /** Success */
      201: {
        content: {
          "application/json": components["schemas"]["IPaymentResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IPaymentNewParams"];
      };
    };
  };
  /** Get payment by uuid */
  GetPaymentByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IPaymentResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Payment not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Update payment state */
  UpdatePayment: {
    parameters: {
      path: {
        /** payment uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IPaymentResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Payment not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get settings */
  GetSettings: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISettingsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get SIP Connection assigned TNLease's */
  GetSIPConnectionTNLeasesList: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeasesResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Assign TNLeases to SIP Connection */
  AssignTNLeasesToSIPConnection: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeasesResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNLeasesAssignParams"];
      };
    };
  };
  /** Get sip connections list */
  ListSIPConnections: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPConnectionsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new sip connection */
  CreateSIPConnection: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPConnectionResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ISIPConnectionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPConnectionNewParams"];
      };
    };
  };
  /** Get extended sip connection info */
  GetSIPConnectionByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPConnectionResponse"];
        };
      };
      /** SIP Connection not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove sip connection */
  RemoveSIPConnectionByID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPConnectionResponse"];
        };
      };
      /** SIP Connection not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip connection */
  ModifySIPConnection: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPConnectionResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPConnectionUpdateParams"];
      };
    };
  };
  /** Get static SIP Control app Call flow */
  GetSIPControlAppStaticCallFlow: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppCallFlowResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Save static SIP Control app Call flow */
  SaveSIPControlAppStaticCallFlow: {
    parameters: {
      path: {
        uuid: string;
      };
      formData: {
        file: unknown;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppCallFlowResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete Save static SIP Control app Call flow */
  RemoveSIPControlAppStaticCallFlow: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Search sip control app call flow logs */
  SearchCallFlowLogs: {
    parameters: {
      path: {
        /** SIPControlApp uuid */
        uuid: components["schemas"]["UUID"];
      };
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ILogCallFlowSearchResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ILogCallFlowSearchParams"];
      };
    };
  };
  /** Get online SIP Control app calls */
  GetSIPControlAppCallsList: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppCallsResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get SIP Control app call */
  GetSIPControlAppCall: {
    parameters: {
      path: {
        /** SIP Control App uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppCallResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Post call XML */
  ExecuteSIPControlAppCallExecuteCallFlow: {
    parameters: {
      path: {
        uuid: string;
      };
      formData: {
        file: unknown;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppCallResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Search sca calls */
  SearchSCACalls: {
    parameters: {
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppCallSearchResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPControlAppCallSearchParams"];
      };
    };
  };
  /** Get SIP Control app assigned TNLease's */
  GetSIPControlAppTNLeasesList: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeasesResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Assign TNLeases to SIP Control App */
  AssignTNLeasesToSIPControlApp: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeasesResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNLeasesAssignParams"];
      };
    };
  };
  /** Get sip control app list */
  ListSIPControlApps: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new sip control app */
  CreateSIPControlApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPControlAppNewParams"];
      };
    };
  };
  /** Get extended sip control app info */
  GetSIPControlAppByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppResponse"];
        };
      };
      /** SIP Control app not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove sip control app */
  RemoveSIPControlAppByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppResponse"];
        };
      };
      /** SIP Control app not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip control app */
  ModifySIPControlApp: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPControlAppResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPControlAppUpdateParams"];
      };
    };
  };
  /** Get sip domain list */
  ListSIPDomains: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPDomainsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new sip domain */
  CreateSIPDomain: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPDomainResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ISIPDomainResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPDomainNewParams"];
      };
    };
  };
  /** Get extended sip domain info */
  GetSIPDomainByDomainName: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPDomainResponse"];
        };
      };
      /** SIP Control app not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove sip domain */
  RemoveSIPDomainByDomainName: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPDomainResponse"];
        };
      };
      /** SIP Control app not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Conflict */
      409: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip domain */
  ModifySIPDomainByDomainName: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPDomainResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPDomainUpdateParams"];
      };
    };
  };
  /** Get sip switches by sip domain */
  ListSIPSwitchesBySIPDomainUUID: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPSwitchesResponse"];
        };
      };
      /** SIP Domain not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new sip switch */
  CreateSIPSwitch: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPSwitchResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ISIPSwitchResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPSwitchNewParams"];
      };
    };
  };
  /** Get extended sip switch info */
  GetSIPSwitchByUUID: {
    parameters: {
      path: {
        /** SIPDomain */
        domain: string;
        /** SIPSwitch uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPSwitchResponse"];
        };
      };
      /** SIP User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove sip switch */
  RemoveSIPSwitchByUUID: {
    parameters: {
      path: {
        /** SIPDomain */
        domain: string;
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPSwitchResponse"];
        };
      };
      /** SIP User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip switch */
  ModifySIPSwitch: {
    parameters: {
      path: {
        /** SIPDomain */
        domain: string;
        /** SIPSwitch uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPSwitchResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPSwitchUpdateParams"];
      };
    };
  };
  /** Get sip users by sip domain */
  ListSIPUsersBySIPDomainUUID: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUsersResponse"];
        };
      };
      /** SIP Domain not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new sip user */
  CreateSIPUser: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserNewParams"];
      };
    };
  };
  /** Get extended sip user info */
  GetSIPUserByUUID: {
    parameters: {
      path: {
        /** SIPDomain */
        domain: string;
        /** SIPUser uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** SIP User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Remove sip user */
  RemoveSIPUserByUUID: {
    parameters: {
      path: {
        /** SIPDomain */
        domain: string;
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** SIP User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip user */
  ModifySIPUser: {
    parameters: {
      path: {
        /** SIPDomain */
        domain: string;
        /** SIPUser uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserUpdateParams"];
      };
    };
  };
  /** Get sip domain invites */
  ListSIPUserInvites: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserInvitesResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIP Domain not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new sip domain invite */
  CreateSIPUserInvite: {
    parameters: {
      path: {
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserInviteResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIP Domain not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserInviteNewParams"];
      };
    };
  };
  /** Remove sip user invite */
  RemoveSIPUserInviteByUUID: {
    parameters: {
      path: {
        domain: string;
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserInviteResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIP Domain / SIP User invite not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip user invite */
  ModifySIPUserInvite: {
    parameters: {
      path: {
        domain: string;
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserInviteResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIP Domain / SIP User invite not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserInviteUpdateParams"];
      };
    };
  };
  /** Get SIP Connection products list */
  GetSIPProductsList: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPProductsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get tech prefix route */
  GetTechPrefixRoute: {
    parameters: {
      path: {
        tn: number;
        domain: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Check for sip user invite */
  CheckSIPDomainByInviteApp: {
    parameters: {
      path: {
        token: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPDomainResponse"];
        };
      };
      /** SIP User Invite not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create SIP user using invite code */
  RegisterSIPUserByInviteApp: {
    parameters: {
      path: {
        token: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** SIP User Invite not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserByInviteNewParams"];
      };
    };
  };
  /** Get current sip user */
  GetSIPUserApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change current sip user */
  ModifySIPUserApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserUpdateParams"];
      };
    };
  };
  /** Request sip user password reset email */
  RequestSIPUserPasswordResetEmailApp: {
    parameters: {
      query: {
        email: string;
        /** Password reset callback url. `{token}` string will be replaced with reset token. By default used api portal ui callback. */
        callback?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Success */
      201: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** SIPUser not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Too  many requests */
      429: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip user password using reset token */
  ChangeSIPUserPasswordViaResetTokenApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Reset token not found or expired */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserResetPasswordParams"];
      };
    };
  };
  /** Upload sip user user avatar */
  UploadSIPUserAvatarApp: {
    parameters: {
      formData: {
        file: unknown;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get current sip users with same sip domain */
  GetSIPUsersWithSameDomainApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUsersResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get current sip user groups list */
  GetSIPGroupsListApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserGroupsResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create SIP user group */
  CreateSIPUserGroupApp: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserGroupResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserGroupNewParams"];
      };
    };
  };
  /** Delete sip user group */
  RemoveSIPUserGroupApp: {
    parameters: {
      path: {
        /** SIPUserGroup uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserGroupResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIPUserGroup not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change sip user group */
  ModifySIPUserGroupApp: {
    parameters: {
      path: {
        /** SIPUserGroup uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserGroupResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIPUserGroup not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserGroupUpdateParams"];
      };
    };
  };
  /** Get sip user group users */
  GetSIPUserGroupUsersApp: {
    parameters: {
      path: {
        /** SIPUserGroup uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUsersResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIPUserGroup not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Add sip users to group */
  AddSIPUsersToSIPUserGroupApp: {
    parameters: {
      path: {
        /** SIPUserGroup uuid */
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUsersResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIPUserGroup not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISIPUserGroupUsersUpdateParams"];
      };
    };
  };
  /** Remove sip user from sip user group */
  RemoveSIPUserFromSIPUserGroupApp: {
    parameters: {
      path: {
        /** SIPUserGroup uuid */
        uuid: components["schemas"]["UUID"];
        /** SIPUser uuid */
        sip_user_uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserGroupResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIPUserGroup / SIPUser not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Add sip user to group */
  AddSIPUserToSIPUserGroupApp: {
    parameters: {
      path: {
        /** SIPUserGroup uuid */
        uuid: components["schemas"]["UUID"];
        /** SIPUser uuid */
        sip_user_uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISIPUserGroupResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SIPUserGroup / SIPUser not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create sms send request */
  SendSMS: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISMSResponse"];
        };
      };
      /** Accepted */
      202: {
        content: {
          "application/json": components["schemas"]["ISMSResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not enough balance */
      402: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** TNLease not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISMSNewParams"];
      };
    };
  };
  /** Get extended outbound sms info */
  GetSMSByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISMSResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SMS not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get extended inbound sms info */
  GetSMSIByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISMSIResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** SMSI not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Search Outbound SMS */
  SearchOutboundSMS: {
    parameters: {
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IISMSSearchResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISMSSearchParams"];
      };
    };
  };
  /** Search Inbound SMS */
  SearchInboundSMS: {
    parameters: {
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IISMSISearchResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISMSISearchParams"];
      };
    };
  };
  /** Search Inbound & Outbound SMS */
  SearchSMSISMS: {
    parameters: {
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ISMSISMSSearchResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ISMSISMSSearchParams"];
      };
    };
  };
  /** Search tn leases */
  SearchTNLeases: {
    parameters: {
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeaseSearchResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNLeaseSearchParams"];
      };
    };
  };
  /** Get extended lease info by TN */
  GetTNLeaseByTN: {
    parameters: {
      path: {
        tn: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeaseResponse"];
        };
      };
      /** TNLease not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get extended lease info */
  GetTNLeaseByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeaseResponse"];
        };
      };
      /** TNLease not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Release tn */
  RemoveTNLeaseByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeaseResponse"];
        };
      };
      /** TNLease not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change TN Lease */
  ModifyTNLease: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNLeaseResponse"];
        };
      };
      /** Forbidden */
      401: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNLeaseUpdateParams"];
      };
    };
  };
  /** Get profile list */
  ListTNProfiles: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNProfilesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get special prices info */
  GetTNSpecialPricesByAccount: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNSpecialPricesResponse"];
        };
      };
      /** Special prices not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get extended profile info */
  GetTNProfileByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNProfileResponse"];
        };
      };
      /** TNLease not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Advanced TN Search */
  Search: {
    parameters: {
      query: {
        /** Page number */
        page?: number;
        /** How many items per page */
        size?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITNSearchResponse"];
        };
      };
      /** Profile not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITNSearchParams"];
      };
    };
  };
  /** Search transactions */
  SearchTransactions: {
    parameters: {
      query: {
        take?: number;
        skip?: number;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IITransactionSearchResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ITransactionSearchParams"];
      };
    };
  };
  /** Get extended transaction info */
  GetTransactionByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITransactionResponse"];
        };
      };
      /** Not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Invoice report */
  GetTransactionInvoiceReport: {
    parameters: {
      query: {
        /** report FROM date. First day of prev month by default */
        from?: string;
        /** report TO date. First day of current month by default */
        to?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITransactionInvoiceReportResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get Dashboard report */
  GetTransactionDashboardReport: {
    parameters: {
      path: {
        /** Reference type */
        ref_type: components["schemas"]["ETransactionReferenceType"];
      };
      query: {
        /** report FROM date. -30 days from today by default */
        from?: string;
        /** report TO date. today by default */
        to?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["ITransactionDashboardReportResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Get all user cart entries */
  GetCartEntries: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserCartEntriesResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new cart entry */
  CreateUserCartEntry: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserCartEntryResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserCartEntryNewParams"];
      };
    };
  };
  /** Clear user cart */
  ClearUserCart: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete user cart entry */
  DeleteUserCartEntry: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserCartEntryResponse"];
        };
      };
      /** Entry not found */
      404: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change user cart entry */
  UpdateUserCartEntry: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserCartEntryResponse"];
        };
      };
      /** Entry not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserCartEntryNewParams"];
      };
    };
  };
  /** Get detail information of a user */
  GetCurrentUser: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Create new user */
  CreateUser: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** User already exists */
      409: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserNewParams"];
      };
    };
  };
  /** Request password reset email */
  RequestUserPasswordResetEmail: {
    parameters: {
      query: {
        email: string;
        /** Password reset callback url. `{token}` string will be replaced with reset token. By default used api portal ui callback. */
        callback?: string;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Success */
      201: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Too  many requests */
      429: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change password using reset token */
  ChangeUserPasswordViaResetToken: {
    parameters: {};
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** Reset token not found or expired */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserResetPasswordParams"];
      };
    };
  };
  /** Get detail information of a user by UUID */
  GetUserByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete user */
  DeleteUserByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Change user information by UUID */
  UpdateUserByUUID: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IUserUpdateParams"];
      };
    };
  };
  /** Upload user avatar */
  UploadAvatar: {
    parameters: {
      path: {
        uuid: string;
      };
      formData: {
        file: unknown;
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
  /** Delete user avatar */
  RemoveAvatar: {
    parameters: {
      path: {
        uuid: components["schemas"]["UUID"];
      };
    };
    responses: {
      /** Ok */
      200: {
        content: {
          "application/json": components["schemas"]["IUserResponse"];
        };
      };
      /** Error Occurred */
      default: {
        content: {
          "application/json": components["schemas"]["IErrorResponse"];
        };
      };
    };
  };
}
